
         *========================================*
                      |OpenViBE| |README|
         *========================================*

|Introduction|

This document explains how to build the platform from sources.

|Prerequesite|

The build system is based on CMake so you will have to have CMake installed
and configured in order to generate makefiles. CMake can be downloaded at
*http://www.cmake.org*

In order to build the *OpenMASK* based kernel, you need to have *OpenMASK*
installed and configured. *OpenMASK* can be downloaded from
*http://www.openmask.org* please read <all> the information files joined
with *OpenMASK* so you'll succeed in having a compiled working copy (you've
been warned !)

|Preparing.environment|

You have to configure your environment so the makefiles knows where to get
*OpenViBE* parts in the tree. You will have to define at least those
variables :
<OpenViBE>
<OpenViBE_kernel>
<OpenViBE_module_ebml>
<OpenViBE_module_fs>
<OpenViBE_module_socket>
<OpenViBE_module_system>
<OpenViBE_module_xml>

supposing you have the repository installed in "/openvibe-svn-repo/" and
you want to build from the trunc.

In <bash>, the environment would be initialized as follows :

OpenViBE_svn_repo=/openvibe-svn-repo
OpenViBE_modules=/openvibe-svn-repo/openvibe-modules
OpenViBE=$OpenViBE_svn_repo/openvibe/trunc
OpenViBE_kernel=$OpenViBE_svn_repo/openvibe-kernel-omk/trunc
OpenViBE_module_ebml=$OpenViBE_modules/ebml/trunc
OpenViBE_module_fs=$OpenViBE_modules/fs/trunc
OpenViBE_module_socket=$OpenViBE_modules/socket/trunc
OpenViBE_module_system=$OpenViBE_modules/system/trunc
OpenViBE_module_xml=$OpenViBE_modules/xml/trunc
export $OpenViBE
export $OpenViBE_kernel
export $OpenViBE_module_ebml
export $OpenViBE_module_fs
export $OpenViBE_module_socket
export $OpenViBE_module_system
export $OpenViBE_module_xml

In <csh>, the environment would be initialized as follows :

setenv OpenViBE_svn_repo /openvibe-svn-repo
setenv OpenViBE_modules  /openvibe-svn-repo/openvibe-modules
setenv OpenViBE                 $OpenViBE_svn_repo/openvibe/trunc
setenv OpenViBE_kernel          $OpenViBE_svn_repo/openvibe-kernel-omk/trunc
setenv OpenViBE_module_ebml     $OpenViBE_modules/ebml/trunc
setenv OpenViBE_module_fs       $OpenViBE_modules/fs/trunc
setenv OpenViBE_module_socket   $OpenViBE_modules/socket/trunc
setenv OpenViBE_module_system   $OpenViBE_modules/system/trunc
setenv OpenViBE_module_xml      $OpenViBE_modules/xml/trunc

|Building.a.project|

If you want to build each project separately, you can go in there directory,
create an temporary subdirectory where the build should be done and start the
build from there. For example, building trunc of *OpenViBE* module EBML could
be done this way :

# cd $OpenViBE
# mkdir tmp-build
# cd tmp-build
# cmake ..
# make

"cmake .." creates the makefiles
"make" compiles the library itself

Compiled files can be found in $OpenViBE/bin and $OpenViBE/lib

|Building.all.projects.at.once|

If you want to build all the projects at once, you will have to create a
master *CMake* configuration file that includes each project to build. A cmake
configuration file that could be used as base follows :

# --------------------------#
# Include all trunc subdirs #
# --------------------------#
# OpenViBE modules
SUBDIRS($ENV{OpenViBE_module_ebml})
SUBDIRS($ENV{OpenViBE_module_fs})
SUBDIRS($ENV{OpenViBE_module_socket})
SUBDIRS($ENV{OpenViBE_module_system})
SUBDIRS($ENV{OpenViBE_module_xml})
# OpenViBE base
SUBDIRS($ENV{OpenViBE})
# OpenViBE kernel
SUBDIRS($ENV{OpenViBE_kernel})
# Plugins
SUBDIRS(openvibe-plugins/acquisition/branches/trunc)
SUBDIRS(openvibe-plugins/utility/branches/trunc)
SUBDIRS(openvibe-plugins/samples/branches/trunc)

Then the build process is done via :

# cd $OpenViBE_svn_repo
# mkdir tmp-build
# cd tmp-build
# cmake ..
# make

Compiled files can be found in project directory /bin and /lib

|End.of.file|

 vim:tw=78:ts=8:ft=help:norl:
