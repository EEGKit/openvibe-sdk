/** 

\page Doc_DataVisualisation Data visualisation

The OpenViBE platform comes with a number of integrated visualisation plugins that cover a whole range of visualisation paradigms. 2D plugins are drawn using the Gtk library,
while 3D visualisation is possible thanks to the 3D API of the OpenViBE Kernel. This API hides implementation details, making it possible to switch rendering libraries if necessary. 
The Ogre 3D library is currently used for 3D rendering.

\if FOOBAR
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
				2D VISUALISATION
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
\endif

\section Doc_DataVisualisation_2DVisualisation 2D visualisation


	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL DISPLAY
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	\subsection Doc_DataVisualisation_2DVisualisation_SignalDisplay Signal Display

\subsubsection Doc_DataVisualisation_2DVisualisation_SignalDisplay_Overview Overview

This plugin displays sample values in the most straightforward way, using one 2D graph per channel where values are plotted on the vertical axis while the horizontal axis represents
time. 

\subsubsection Doc_DataVisualisation_2DVisualisation_SignalDisplay_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_signal_display

An easy way to test this plugin consists in generating signals with the Sinus Oscillator plugin (found under 'Samples'), then connecting its signal output to the signal input 
of the Signal Display plugin.

<img src="data_visualisation_signal_display.png"></img>
<center><strong>Visualising 2 channels using the Signal Display plugin</strong></center>

\subsubsection Doc_DataVisualisation_2DVisualisation_SignalDisplay_Settings Settings

Double click the Signal Display box to display the offline options dialog box. These include the Time Scale setting, which configures the time span that gets plotted for each channel. 
It is expressed in seconds.

Online options (accessible by clicking the toolbar button on top of the Signal Display window when the Player is launched) include :

- Zoom In/Out : one can adjust the vertical scale of a graph by clicking the Zoom In or Out buttons and then clicking on channels to be magnified/shrinked.
- Best Fit : clicking this button and then clicking on a channel ensures the vertical scale is adapted to the sample values plotted for this channel.
- Normal Size : clicking this button and then clicking on a channel adapts the vertical scale while maintaining the horizontal axis at the window's half-height.
- Left/Bottom Ruler : these buttons toggle channel labels and amplitude values on/off.
- Time Scale : this setting adjusts the time span displayed by the plugin.
- Select Channels : clicking this button pops up a dialog that allows to show/hide some of the channels.
- Multi-View : clicking this button pops up a dialog that configures what channels should be plotted in an extra graph at the bottom of the Signal Display
window. When no channels are selected (default) this extra graph is not displayed.
- Information : this button displays information about sampled data (min/max values and so on).

<img src="data_visualisation_signal_display_toolbar.png"></img>
<center><strong>Signal Display toolbar</strong></center>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				POWER SPECTRUM
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_2DVisualisation_PowerSpectrum Power Spectrum

\subsubsection Doc_DataVisualisation_2DVisualisation_PowerSpectrum_Overview Overview

The power spectrum displays the amplitude of a signal in a set of frequency bands. One 2D graph is plotted per channel, where amplitudes are distributed on the vertical axis
and frequency bands on the horizontal axis. There is one spectrum per channel.

\subsubsection Doc_DataVisualisation_2DVisualisation_PowerSpectrum_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_power_spectrum

Let's use a Sinus Oscillator to generate sinusoidal signals. A Signal Display box will be used in addition to a Power Spectrum box (both are found under '2D Visualisation) to 
visualise signals and their spectra at the same time.

The power spectrum plugin has one input connector of 'Spectrum' type. Indeed, signal information must be processed before being sent to this plugin,
so that amplitude values are computed for a set of frequency bands. These computations can be done using a Spectral Analysis filter (found under 'Signal Processing GPL > Spectral
Analysis'), making sure 'Amplitude' computation is enable in its settings (see \ref Doc_SignalProcessing_GPL_SpectralAnalysis for more on this). However, results might not be satisfactory due to the small size of data chunks being processed by the Spectral Analysis plugin. 

To feed the plugin more significant data, one can use the Time-Based Epoching
plugin to store data and send it only when it amounts to a given duration (see \ref Doc_SignalProcessing_Epoching to learn more about this box). One can insert an epoching
box right after a Sinus Oscillator, setting its epoch duration to e.g. 1s and epoch intervals to 0.0625s (1/16th of a second). This will ensure 1s-long chunks are sent 16 times
a second to the Spectral Analysis box.

Typical spectra of combinations of sinusoidal signals, as generated by a Sinus Oscillator box, should look like the following :

<img src="data_visualisation_power_spectrum.png"></img>
<center><strong>Time-based epoching for power spectra computation</strong></center>

\subsubsection Doc_DataVisualisation_2DVisualisation_PowerSpectrum_Settings Settings

Offline options include the minimum and maximum frequencies to display. If these frequencies lie outside the effective incoming frequency range , they will be clamped to it at Player
start time.

Online options include :

- Best Fit : clicking this button ensures the vertical scale is adapted to the sample values plotted on all channels.
- Best Fit per Channel : similar to the previous button, only this time the vertical scale is adapted on a per-channel basis.
- Left/Bottom Ruler : these buttons toggle amplitude values and frequency values on/off.
- Min/Max Frequency : the range of frequency bands that are drawn may be adjusted with these buttons.
- Select Channels : clicking this button pops up a dialog that allows to show/hide some of the channels.

<img src="data_visualisation_power_spectrum_toolbar.png"></img>
<center><strong>Power Spectrum toolbar</strong></center>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				TIME FREQUENCY MAP
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_2DVisualisation_TimeFrequencyMap Time Frequency Map

\subsubsection Doc_DataVisualisation_2DVisualisation_TimeFrequencyMap_Overview Overview

A Time-Frequency (TF) map displays power spectra of signals over time, making it possible to track changes in amplitudes over a given time span. To that end, it 
uses a color scale to convert amplitudes to colors. This makes it possible to represent a single spectrum as a column of color-coded blocks. As time goes by, they
are shifted to the left of the graph to make room for more recent spectra. There is one map per channel.

Depending on the resolution of the map, a variable number of frequency bands are displayed per spectrum, or column of the map. 
If the number of frequency bands equals the height of the map for a given channel, each frequency band is one pixel high. Smaller maps won't be able to display all
frequency bands, while in bigger maps, each frequency band will be allotted an area that is one pixel high or more.

Since a TF map displays a series of power spectra, input data should be preprocessed by a Spectral Analysis box, as is the case with the Power Spectrum plugin. 
See \ref Doc_DataVisualisation_2DVisualisation_PowerSpectrum for an example, and \ref Doc_SignalProcessing_GPL_SpectralAnalysis for more information.

\subsubsection Doc_DataVisualisation_2DVisualisation_TimeFrequencyMap_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_time_frequency_map

To test this plugin, one can extend the \ref Doc_DataVisualisation_2DVisualisation_PowerSpectrum example by adding a Time-Frequency Map plugin. Since Sinus Oscillator
signals are made up of sinusoidal signals with frequencies in the [0-50Hz] range, one should make sure the minimum and maximum displayed frequencies settings of the 
Power Spectrum and TF Map plugins match this range. Results should look like the following screenshot. 

A few remarks :
	- For now, there is no frequency scale displayed to the left of the maps. Frequencies are mapped from bottom to top for each channel.

	- TF maps don't change much over time, which is logical since power spectra displayed by the Power Spectrum box are pretty much constant themselves. This translates
	into (almost uninterrupted) horizontal lines in the TF maps.
	
	- Finally, one can notice two dominant frequency bands in the power spectrum of each channel, where they stand out as high amplitude peaks. These bands translate into 
	dark horizontal lines in the TF maps.

<img src="data_visualisation_frequency_spectrum.png"></img>
<center><strong>Power spectra and their "history" displayed over the last 10 seconds using the TF map plugin</strong></center>

\subsubsection Doc_DataVisualisation_2DVisualisation_TimeFrequencyMap_Settings Settings

Offline options include the time scale and the minimum/maximum displayed frequencies.

Online options include :

- Bottom Ruler : this button toggles time values on/off.
- Min/Max Frequency : the range of frequency bands that are drawn may be adjusted with these buttons.
- Time Scale : this setting adjusts the time span displayed by the plugin.
- Select Channels : clicking this button pops up a dialog that allows to show/hide some of the channels.
- Attenuation : this setting allows to gradually adapt color thresholds. Valid values are in the [0,1] interval.

<img src="data_visualisation_frequency_spectrum_toolbar.png"></img>
<center><strong>Time Frequency Map toolbar</strong></center>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				2D TOPOGRAPHIC MAP
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_2DVisualisation_2DTopographicMap 2D Topographic Map

\subsubsection Doc_DataVisualisation_2DVisualisation_2DTopographicMap_Overview Overview

While the plugins described previously provide useful information as to the composition of signals, they don't display topographic information, i.e. information related to
the location of signal sources. The 2D Topographic Map plugin is one possible way to combine signal measures and topographical information. It interpolates measured potentials
and maps them over the scalp surface using a color scale, making it easy to locate areas where brain activity is the most intense at any given time.

Since this is a 2D plugin, one cannot freely move the camera around the head, as is the case with the 3D Topographic Map plugin 
(see \ref Doc_DataVisualisation_3DVisualisation_3DTopographicMap). However, the user may switch between several views which, when combined, cover the whole of the skull area 
over which potentials may be mapped.

This plugin uses a spherical spline algorithm to interpolate potentials measured at electrode locations over an area of interest (which varies depending on the active view).
One can choose to interpolate potentials (which is done by interpolating along a spline whose control points lie at electrode locations) or current densities (which are 
computed using the spline laplacian).

\subsubsection Doc_DataVisualisation_2DVisualisation_2DTopographicMap_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_2D_topographic_map

To see this plugin in action, one should first locate a file corresponding to a prerecorded EEG or MEG session and play it back using e. g. a GDF file reader or some other suitable plugin.
The GDF file used by default in this scenario is the following : tutorials/data/real_hand_movements_eeg.gdf

Signal data read by this box can be forwarded to the 2D Topographic Map plugin, which has a single input connector. However, interpolating unprocessed data will not deliver very meaningful
results. To make it easier to analyse, one can restrict signals to a frequency band of interest. Also, it can be desirable to average out signals using DSPs (a typical formula
consists in visualising log(1+X*X) where X represents incoming signals) and epoch average boxes. This should result in smoothed out signals where peak activity areas will move gradually
between frames, thus making them easily identifiable on the map.

Let's use a temporal filter box (found under 'Signal Processing GPL > Filters') to restrict incoming signals to a frequency band of our choice, e.g. the Beta range, about 16-24 Hz.
Appropriate settings could go like this : 'Butterworth' filter type, 'Band Pass' filtering, 16Hz low pass band edge, 24Hz high pass band edge. To know more about this filter, see
\ref Doc_SignalProcessing_GPL_Filters).

Next, one can average out signals by applying the typical log(1+X*X) formula. A 'Simple DSP' (found under 'Signal Processing > Basic') can compute the square of the signal ('Equation'
should read 'X*X'), its output is averaged using a Signal Average box (found under 'Signal Processing > Basic'), and the decimal log of its output is obtained using another
Simple DSP box (formula : 'log(X)'). See \ref Doc_SignalProcessing_Basic for information on the Simple DSP and Signal Average boxes)

Finally, once data has been restricted to a given frequency band and averaged out, it can be further smoothed out in time using an Epoch Average box ('Signal Processing > Averaging'). 
This allows to average data over a number of epochs. See \ref Doc_SignalProcessing_Averaging for more information.

Here is what an EEG recording may look like using the scenario that was just described :

<img src="data_visualisation_2D_topographic_map.png"></img>
<center><strong>Top view mapping of potentials interpolated from 9 EEG electrodes</strong></center>

\subsubsection Doc_DataVisualisation_2DVisualisation_2DTopographicMap_Settings Settings

Offline options include interpolation type (direct spline interpolation for potentials, or spline laplacian to map currents) and delay applied when mapping data (0 by default). The latter
can prove useful in the case of e.g. neurofeedback experiments. Indeed, subjects may find it easier to observe their mental activity and the effect mental tasks can have on it 
when it is displayed with a small delay (on the order of a few hundreds of milliseconds).

Online options include :

- Radial/Axial Projection : these settings control the projection mode. Radial projection displays a greater mapping area, but localisation is less intuitive than
with axial projection.
- Map Potentials/Currents : these settings control the nature of mapped values. While potentials are computed from spline values, currents computation uses the spline laplacian.
- Toggle Electrodes : toggle electrodes on/off.
- Top/Left/Right/Back View : these buttons enable view switching.
- Delay : this cursor defines the delay to apply to the values that are drawn.

<img src="data_visualisation_2D_topographic_map_toolbar.png"></img>
<center><strong>2D Topographic Map toolbar</strong></center>

\if FOOBAR
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
				3D VISUALISATION
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
\endif

\section Doc_DataVisualisation_3DVisualisation 3D visualisation

In addition to 2D visualisation plugins, the OpenViBE platform also offers 3D visualisation possibilities to provide different, 
more realistic brain activity visualisation plugins. The OpenViBE API includes basic 3D scene management methods so that plugins may
load and manipulate simple 3D scenes within the OpenViBE application context. The 3D API made available to plugins is independent of the
underlying 3D rendering library (Ogre3D), which can therefore be replaced if need be (or additional rendering libraries may be added). To know more
about this, see the following documentation : 
	- \ref visualisation_manager_context for visualisation manager information
	- \ref Doc_VisualisationContext for explanations on the visualisation context available for plugins
	- http://www.ogre3d.com for information on Ogre3D, the 3D rendering library used by the OpenViBE kernel to handle 3D scenes.

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIMPLE 3 VIEWER
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_3DVisualisation_Simple3DViewer Simple 3D viewer

\subsubsection Doc_DataVisualisation_3DVisualisation_Simple3DViewer_Overview Overview

This plugin was developed for 3D testing purposes. This standalone box demonstrates some capabilities of the OpenViBE 3D API, and can help make sure 
a 3D context is available, or a 3D model behaves as expected.

This viewer creates an empty 3D scene by default. It's then up to the user to load 3D models and apply transformations to them, such as position/scale/color 
transformations.

\subsubsection Doc_DataVisualisation_3DVisualisation_Simple3DViewer_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_simple_3D_viewer

To start with, one should make sure the 3D context was initialised properly. This is done at startup time, and a log message should read "[INF] Created primary
render window" at some point during application startup. In any case, loading the sample 3D viewer scenario and pressing Play should display an empty 3D window. 
If it doesn't, it probably means the 3D context could not be initialised in the first place.

The viewer allows to load and manipulate 3D objects. Since the rendering library used in OpenViBE is Ogre3D, objects must be stored in the proprietary format
of this library which is the .mesh format. See the Ogre3D website for information about it. For now, one can test OpenViBE 3D rendering using the sample 
objects that come with the platform.

Press the Create Object button (situated in the plugin toolbar) : here one can load a 'standard' object (these are simple geometrical shapes such as spheres and cones) or any 'custom' object 
(one should then type in the name of the 3d object file to be loaded, omitting its extension). Let's load a sphere by typing in 'mysphere' in the object name field, then
checking the 'standard' radio button and selecting 'sphere' in the drop-down box. Press OK. The camera might end up lying within the object that was just created. Press the 'View All'
button to automatically reset the camera position so that it lies in front of the 3D scene. A sphere should now be visible.

To delete an object, one can press the Delete Object button and type in the name of the object to destroy.

Now let's move our object. Press the Set Position button, enter 'mysphere' as the object name and then some non-null coordinates to move the sphere. Press OK to see the 
results. Similarly, the object scale may be modified using the Set Scale button. Notice how the scale can be set independently for each axis. To apply a uniform scale to 
an object, one should enter the same scale for each axis.

Let's now change the object color. Type in the object name, and then select 'Set Material Color'. This will modify the material properties of the object, meaning all objects
using this material will be affected by this change. Enter an RGB color to attribute to the diffuse color of the material (each component should remain in the [0, 1] range).
Similarly, the transparency of an object may be changed using the Transparency field (0 corresponding to a totally opaque object and 1 totally transparent).

The Object color can also be changed by modifying the colors of its vertices. This may be done by selecting 'Set Vertex Color' in the Set Color dialog box. However, this
requires objects to have special properties. Namely, the vertex buffers of the object must have the 'colors_diffuse' tag, which means each element (or vertex) has its own
color in addition to a position and a normal.

Also, one can move the camera at any time using the mouse. Maintaining the left mouse button pressed and moving the mouse rotates the camera around the center of the scene. To 
recompute the center (e.g. whenever the scene contents have changed), press the 'View All' button. To zoom in and out of the scene, press the right mouse button and move the mouse
up or down.

<img src="data_visualisation_simple_3D_viewer.png"></img>
<center><strong>Manipulating 3D objects using the Simple 3D Viewer plugin</strong></center>

\subsubsection Doc_DataVisualisation_3DVisualisation_Simple3DViewer_Settings Settings

Online options include :

- Create Object : opens a dialog to create an object.
- Delete Object : opens a dialog to delete an object.
- Set Position : opens a dialog to position an object.
- Set Scale : opens a dialog to scale an object.
- Set Color : opens a dialog to change the color of an object.
- View All : resets the camera position so that it encompasses the whole 3D scene, facing the +Z side of its bounding box

<img src="data_visualisation_simple_3D_viewer_toolbar.png"></img>
<center><strong>Simple 3D Viewer toolbar</strong></center>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				3D TOPOGRAPHIC MAP
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_3DVisualisation_3DTopographicMap 3D topographic map

\subsubsection Doc_DataVisualisation_3DVisualisation_3DTopographicMap_Overview Overview

The 3D topographic map uses the same visualisation paradigm as its 2D version, which consists in interpolating potentials (or current densities) at the 
surface of the scalp, converting them to colors using a color scale and mapping them over the surface of the scalp. The 3D version offers the possibility to 
freeky move around the head to observe brain activity from a custom point of view.

It requires a head model to be available. This model is divided in two : the lower part, which includes the face and the neck, is static (meaning once it's loaded,
it doesn't get modified). The other part, the 'scalp', is the area where potentials are mapped. Its size and shape determine where brain activity mapping will
occur once the plugin is running. This second mesh is a set of vertices whose colors will be modified depending on the value of the potential interpolated there.

Potentials interpolation works using a spherical spline algorithm. The coordinates of the electrodes used in the experiment are sent to the algorithm in an 
initialization step. Then as the experiment is conducted, the values of the potentials measured at the electrodes location are sent to the algorithm.

Potentials at scalp vertices locations can be retrieved by converting each vertex location (expressed in model frame) to a cartesian orthonormal frame.

\subsubsection Doc_DataVisualisation_3DVisualisation_3DTopographicMap_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_3D_topographic_map

In this example an EEG recording is read using a GDF file reader, and data is processed and filtered before being mapped onto the scalp surface. For details on this 
data processing step, see the example in \ref Doc_DataVisualisation_2DVisualisation_2DTopographicMap.

A 2D topographic map is displayed next to the 3D verion for comparison purposes.

<img src="data_visualisation_3D_topographic_map.png"></img>
<center><strong>Mapping brain activity in 2D and 3D</strong></center>

\subsubsection Doc_DataVisualisation_3DVisualisation_3DTopographicMap_Settings Settings

Online options include :

- Map Potentials/Currents : these settings control the nature of mapped values. While potentials are computed from spline values, currents computation uses the spline laplacian.
- Toggle Electrodes : toggle electrodes on/off.
- Toggle Sampling Points : toggle sampling points on/off. Sampling points lie at the vertices of the skull mesh.

<img src="data_visualisation_3D_topographic_map_toolbar.png"></img>
<center><strong>3D Topographic Map toolbar</strong></center>


	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				VOXEL DISPLAY
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	\subsection Doc_DataVisualisation_3DVisualisation_VoxelDisplay Voxel display

\subsubsection Doc_DataVisualisation_3DVisualisation_VoxelDisplay_Overview Overview

This plugin aims at displaying brain activity sources in real time, based on inverse model computations for source localisation. It is still a work in progress
at the time of writing (08/09).

\subsubsection Doc_DataVisualisation_3DVisualisation_VoxelDisplay_Example Example

This example is based on the following scenario file : tutorials/visualisation/sample_voxel_display

\subsubsection Doc_DataVisualisation_3DVisualisation_VoxelDisplay_Settings Settings

Online options include :

- Cones/Spheres : these buttons switch between possible voxel shapes.
- View All : resets the camera position so that it encompasses the whole 3D scene, facing the +Z side of its bounding box

<img src="data_visualisation_voxel_display_toolbar.png"></img>
<center><strong>Voxel Display toolbar</strong></center>

\section Doc_DataVisualisation_OtherVisualisations Other visualisation paradigms using external applications

One of the goals of the OpenViBE platform is to offer the means to combine virtual reality (VR) and novel visualisation approaches with BCI and neurofeedback 
experiments. To that end, in addition to the built-in visualisation plugins offered by the platform, it is possible to develop external visualisation applications.
In such cases, the OpenViBE platform may be seen as an interaction device used to control external VR applications. This is possible thanks to the VRML communication
protocol supported by OpenViBE.

*/