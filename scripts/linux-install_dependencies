#!/bin/bash

## supposes to have :
##   - build-essentials
##   - freeglut3-dev TODO should be removed
##   - g77
##   - subversion
##   - wget
##   - tar with gzip/bzip2

pushd ..

####################################
##
##  checks supposed dependencies
##
####################################

ov_svn=`which svn`
ov_wget=`which wget`
ov_tar=`which tar`
ov_gzip=`which gzip`
ov_bzip2=`which bzip2`
ov_unzip=`which unzip`
ov_make=`which make`
ov_gcc=`which gcc`
ov_gpp=`which g++`
ov_g77=`which g77`
ov_sed=`which sed`

echo "============================================================="
echo "Using as subversion : [$ov_svn]..."
echo "Using as wget       : [$ov_wget]..."
echo "Using as tar        : [$ov_tar]..."
echo "Using as gzip       : [$ov_gzip]..."
echo "Using as bzip2      : [$ov_bzip2]..."
echo "Using as unnzip     : [$ov_unzip]..."
echo "Using as make       : [$ov_make]..."
echo "Using as gcc        : [$ov_gcc]..."
echo "Using as g++        : [$ov_gpp]..."
echo "Using as g77        : [$ov_g77]..."
echo "Using as sed        : [$ov_sed]..."

####################################
##
##  interesting variables for each package
##
####################################

# ov_should_build_[packagename]_flag=
#
# ov_dep_[packagename]_url=
# ov_dep_[packagename]_archive_name=
# ov_dep_[packagename]_additional_configure_flags=
#
# ov_dep_[packagename]_hook_download=
# ov_dep_[packagename]_hook_download_pre=
# ov_dep_[packagename]_hook_download_post=
#
# ov_dep_[packagename]_hook_checkout=
# ov_dep_[packagename]_hook_checkout_pre=
# ov_dep_[packagename]_hook_checkout_post=
#
# ov_dep_[packagename]_hook_uncompress=
# ov_dep_[packagename]_hook_uncompress_pre=
# ov_dep_[packagename]_hook_uncompress_post=
#
# ov_dep_[packagename]_hook_configure=
# ov_dep_[packagename]_hook_configure_pre=
# ov_dep_[packagename]_hook_configure_post=
#
# ov_dep_[packagename]_hook_make=
# ov_dep_[packagename]_hook_make_pre=
# ov_dep_[packagename]_hook_make_post=
#
# ov_dep_[packagename]_hook_install=
# ov_dep_[packagename]_hook_install_pre=
# ov_dep_[packagename]_hook_install_post=

####################################
##
##  initializes some environment variables
##
####################################

ov_should_skip_download=false

ov_directory=`pwd`

ov_depend_folder_rel=dependencies
ov_archives_folder_rel=arch
ov_tmp_folder_rel=tmp
ov_log_folder_rel=log
ov_hit_folder_rel=hit

ov_depend_folder=$ov_directory/$ov_depend_folder_rel
ov_archives_folder=$ov_depend_folder/$ov_archives_folder_rel
ov_tmp_folder=$ov_depend_folder/$ov_tmp_folder_rel
ov_log_folder=$ov_depend_folder/$ov_log_folder_rel
ov_hit_folder=$ov_depend_folder/$ov_hit_folder_rel

ov_should_build_pkgconfig_flag=true
ov_should_build_cmake_flag=true
ov_should_build_boost_flag=true
ov_should_build_expat_flag=true
ov_should_build_gettext_flag=true
ov_should_build_glib_flag=true
ov_should_build_libxml_flag=true
ov_should_build_zlib_flag=true
ov_should_build_libpng_flag=true
ov_should_build_libxproto_flag=true
ov_should_build_libxextproto_flag=true
ov_should_build_libxtrans_flag=true
ov_should_build_libxslt_flag=true
ov_should_build_libxau_flag=true
ov_should_build_pthreadstubs_flag=true
ov_should_build_libxcbproto_flag=true
ov_should_build_libxcb_flag=true
ov_should_build_libkbproto_flag=true
ov_should_build_libinputproto_flag=true
ov_should_build_libxdmcp_flag=true
ov_should_build_libx11_flag=true
ov_should_build_libxext_flag=true
ov_should_build_freetype_flag=true
ov_should_build_fontconfig_flag=true
ov_should_build_renderproto_flag=true
ov_should_build_libxdmcp_flag=true
ov_should_build_libxrender_flag=true
ov_should_build_cairo_flag=true
ov_should_build_pango_flag=true
ov_should_build_atk_flag=true
ov_should_build_flag=true
ov_should_build_clearlooks_flag=true
ov_should_build_gtk_flag=true
ov_should_build_libglade_flag=true
ov_should_build_glade_flag=true
ov_should_build_libtool_flag=true
ov_should_build_itpp_external_flag=true
ov_should_build_itpp_flag=true
ov_should_build_gsl_flag=true
ov_should_build_torch_flag=true
ov_should_build_vrpn_flag=true
ov_should_build_openmask_flag=true

ov_dep_pkgconfig_url=ftp://ftp.gtk.org/pub/gtk/v2.10/dependencies/pkg-config-0.20.tar.gz
ov_dep_cmake_url=http://www.cmake.org/files/v2.4/cmake-2.4.6-Linux-i386.tar.gz
ov_dep_boost_url=http://downloads.sourceforge.net/boost/boost_1_34_1.tar.bz2
ov_dep_expat_url=http://downloads.sourceforge.net/expat/expat-2.0.0.tar.gz
ov_dep_gtk_url=ftp://ftp.gtk.org/pub/gtk/v2.10/gtk+-2.10.12.tar.bz2
ov_dep_glib_url=ftp://ftp.gtk.org/pub/glib/2.12/glib-2.12.12.tar.gz
ov_dep_gettext_url=ftp://ftp.cs.univ-paris8.fr/mirrors/ftp.gnu.org/gnu/gettext/gettext-0.16.1.tar.gz
ov_dep_libxml_url=ftp://xmlsoft.org/libxml2/libxml2-sources-2.6.28.tar.gz
ov_dep_zlib_url=http://downloads.sourceforge.net/libpng/zlib-1.2.3.tar.gz
ov_dep_libpng_url=http://downloads.sourceforge.net/libpng/libpng-1.2.18.tar.gz
ov_dep_libxproto_url=http://xorg.freedesktop.org/releases/individual/proto/xproto-7.0.10.tar.bz2
ov_dep_libxextproto_url=http://xorg.freedesktop.org/releases/individual/proto/xextproto-7.0.2.tar.bz2
ov_dep_libxtrans_url=http://xorg.freedesktop.org/releases/individual/lib/xtrans-1.0.3.tar.bz2
ov_dep_libxslt_url=ftp://ftp.gnome.org/pub/GNOME/sources/libxslt/1.1/libxslt-1.1.20.tar.bz2
ov_dep_libxau_url=http://xorg.freedesktop.org/releases/individual/lib/libXau-1.0.3.tar.bz2
ov_dep_pthreadstubs_url=http://xorg.freedesktop.org/releases/individual/lib/libpthread-stubs-0.1.tar.bz2
ov_dep_libxcbproto_url=http://xcb.freedesktop.org/dist/xcb-proto-1.0.tar.bz2
ov_dep_libxcb_url=http://xcb.freedesktop.org/dist/libxcb-1.0.tar.bz2
ov_dep_libkbproto_url=http://xorg.freedesktop.org/releases/individual/proto/kbproto-1.0.3.tar.bz2
ov_dep_libinputproto_url=http://xorg.freedesktop.org/releases/individual/proto/inputproto-1.4.tar.bz2
ov_dep_libxdmcp_url=http://xorg.freedesktop.org/releases/individual/lib/libXdmcp-1.0.2.tar.bz2
ov_dep_libx11_url=http://xorg.freedesktop.org/releases/individual/lib/libX11-1.1.1.tar.bz2
ov_dep_libxext_url=http://xorg.freedesktop.org/releases/individual/lib/libXext-1.0.3.tar.bz2
ov_dep_freetype_url=http://downloads.sourceforge.net/freetype/freetype-2.3.4.tar.gz
ov_dep_fontconfig_url=http://xorg.freedesktop.org/releases/X11R7.2/src/extras/fontconfig-2.4.2.tar.gz
ov_dep_renderproto_url=http://xorg.freedesktop.org/releases/individual/proto/renderproto-0.9.2.tar.bz2
ov_dep_libxdmcp_url=http://xorg.freedesktop.org/releases/individual/lib/libXdmcp-1.0.2.tar.bz2
ov_dep_libxrender_url=http://xorg.freedesktop.org/archive/individual/lib/libXrender-0.9.2.tar.gz
ov_dep_cairo_url=ftp://ftp.gtk.org/pub/gtk/v2.10/dependencies/cairo-1.2.6.tar.gz
ov_dep_pango_url=ftp://ftp.gtk.org/pub/pango/1.16/pango-1.16.4.tar.gz
ov_dep_atk_url=ftp://ftp.gtk.org/pub/gtk/v2.10/dependencies/atk-1.9.1.tar.bz2
ov_dep_clearlooks_url=http://downloads.sourceforge.net/clearlooks/clearlooks-0.6.2.tar.bz2
ov_dep_libglade_url=http://ftp.gnome.org/pub/GNOME/sources/libglade/2.6/libglade-2.6.0.tar.bz2
ov_dep_glade_url=http://ftp.gnome.org/pub/GNOME/sources/glade3/3.1/glade3-3.1.5.tar.gz
ov_dep_libtool_url=ftp://ftp.cs.univ-paris8.fr/mirrors/ftp.gnu.org/gnu/libtool/libtool-1.5.22.tar.gz
ov_dep_itpp_external_url=http://downloads.sourceforge.net/itpp/itpp-external-2.3.0.tar.gz
ov_dep_itpp_url=http://downloads.sourceforge.net/itpp/itpp-3.10.10.tar.gz
ov_dep_gsl_url=ftp://ftp.cs.univ-paris8.fr/mirrors/ftp.gnu.org/gnu/gsl/gsl-1.9.tar.gz
ov_dep_torch_url=http://www.torch.ch/archives/Torch3src.tgz
ov_dep_vrpn_url=ftp://ftp.cs.unc.edu/pub/packages/GRIP/vrpn/vrpn_07_13.zip
ov_dep_openmask_url=svn://scm.gforge.inria.fr/svn/openmask/OpenMASK

ov_dep_pkgconfig_archive_name=$ov_archives_folder/pkg-config-0.20.tar.gz
ov_dep_cmake_archive_name=$ov_archives_folder/cmake-2.4.6.tar.gz
ov_dep_boost_archive_name=$ov_archives_folder/boost_1_34_1.tar.bz2
ov_dep_expat_archive_name=$ov_archives_folder/expat-2.0.0.tar.gz
ov_dep_gtk_archive_name=$ov_archives_folder/gtk-2.10.12.tar.bz2
ov_dep_glib_archive_name=$ov_archives_folder/glib-2.12.12.tar.gz
ov_dep_gettext_archive_name=$ov_archives_folder/gettext-0.16.1.tar.gz
ov_dep_libxml_archive_name=$ov_archives_folder/libxml2-2.6.28.tar.gz
ov_dep_zlib_archive_name=$ov_archives_folder/zlib-1.2.3.tar.gz
ov_dep_libpng_archive_name=$ov_archives_folder/libpng-1.2.18.tar.gz
ov_dep_libxproto_archive_name=$ov_archives_folder/xproto-7.0.10.tar.bz2
ov_dep_libxextproto_archive_name=$ov_archives_folder/xextproto-7.0.2.tar.bz2
ov_dep_libxtrans_archive_name=$ov_archives_folder/xtrans-1.0.3.tar.bz2
ov_dep_libxslt_archive_name=$ov_archives_folder/libxslt-1.1.20.tar.bz2
ov_dep_libxau_archive_name=$ov_archives_folder/libXau-1.0.3.tar.bz2
ov_dep_pthreadstubs_archive_name=$ov_archives_folder/libpthread-stubs-0.1.tar.bz2
ov_dep_libxcbproto_archive_name=$ov_archives_folder/xcb-proto-1.0.tar.bz2
ov_dep_libxcb_archive_name=$ov_archives_folder/libxcb-1.0.tar.bz2
ov_dep_libkbproto_archive_name=$ov_archives_folder/kbproto-1.0.3.tar.bz2
ov_dep_libinputproto_archive_name=$ov_archives_folder/inputproto-1.4.tar.bz2
ov_dep_libxdmcp_archive_name=$ov_archives_folder/libXdmcp-1.0.0.tar.bz2
ov_dep_libx11_archive_name=$ov_archives_folder/libX11-1.1.1.tar.bz2
ov_dep_libxext_archive_name=$ov_archives_folder/libXext-1.0.3.tar.bz2
ov_dep_freetype_archive_name=$ov_archives_folder/freetype-2.3.4.tar.gz
ov_dep_fontconfig_archive_name=$ov_archives_folder/fontconfig-2.4.2.tar.gz
ov_dep_renderproto_archive_name=$ov_archives_folder/renderproto-0.9.2.tar.bz2
ov_dep_libxdmcp_archive_name=$ov_archives_folder/libXdmcp-1.0.2.tar.bz2
ov_dep_libxrender_archive_name=$ov_archives_folder/libXrender-0.9.2.tar.gz
ov_dep_cairo_archive_name=$ov_archives_folder/cairo-1.2.6.tar.gz
ov_dep_pango_archive_name=$ov_archives_folder/pango-1.16.4.tar.gz
ov_dep_atk_archive_name=$ov_archives_folder/atk-1.9.1.tar.bz2
ov_dep_clearlooks_archive_name=$ov_archives_folder/clearlooks-0.6.2.tar.bz2
ov_dep_libglade_archive_name=$ov_archives_folder/libglade-2.6.0.tar.bz2
ov_dep_glade_archive_name=$ov_archives_folder/glade3-3.1.5.tar.gz
ov_dep_libtool_archive_name=$ov_archives_folder/libtool-1.5.22.tar.gz
ov_dep_itpp_external_archive_name=$ov_archives_folder/itpp-external-2.3.0.tar.gz
ov_dep_itpp_archive_name=$ov_archives_folder/itpp-3.10.10.tar.gz
ov_dep_gsl_archive_name=$ov_archives_folder/gsl-1.9.tar.gz
ov_dep_torch_archive_name=$ov_archives_folder/torch-3.tar.gz
ov_dep_vrpn_archive_name=$ov_archives_folder/vrpn-7.13.zip

####################################
##
##  several hooks for specific archives
##
####################################
# preserve tree on cp  --parents

ov_dep_gtk_additional_configure_flags="--without-libtiff --without-libjpeg"

ov_dep_openmask_additional_configure_flags="--disable-scen-graph"

ov_dep_boost_hook_configure=" "
ov_dep_boost_hook_make=" "
ov_dep_boost_hook_install="mv * ../include"

ov_dep_zlib_hook_configure="pushd * && ./configure --prefix=$ov_depend_folder && popd"
ov_dep_itpp_external_hook_configure="pushd * && ./configure --prefix=$ov_depend_folder && popd"
# ov_dep_itpp_hook_configure="pushd * && ./configure --prefix=$ov_depend_folder && popd"
ov_dep_torch_hook_configure="pushd * && ln -s config/Makefile_options_Linux Makefile_options_Linux && make depend && popd"
ov_dep_torch_hook_install="pushd * && find -name *.h -type f -exec cp -f \"{}\" ../../include \\; && find -name *.a -type f -exec cp -f \"{}\" ../../lib \\; && cp Makefile_options_Linux ../.. && popd"

ov_dep_libx11_hook_configure_pre="pushd * && $ov_sed -i \"s:XPROTO_CFLAGS -I/usr/include:XPROTO_CFLAGS -I/usr/include -I$ov_depend_folder/include:g\" ./configure && popd"

ov_dep_vrpn_hook_uncompress='$ov_unzip "$ov_current_package_archive_name"'
ov_dep_vrpn_hook_configure="$ov_sed -i \"s/#HW_OS := pc_linux$/HW_OS := pc_linux/g\" quat/makefile && $ov_sed -i \"s/#HW_OS := pc_linux$/HW_OS := pc_linux/g\" vrpn/Makefile"
ov_dep_vrpn_hook_make="pushd quat && make && cd ../vrpn && make && popd"
ov_dep_vrpn_hook_install="chmod -x quat/*.h vrpn/*.h && cp quat/*.h vrpn/*.h ../include && cp quat/pc_linux/*.a vrpn/pc_linux/*.a ../lib"

####################################
##
##  initializes some env variables
##
####################################

script_dependencies_file=scripts/linux-dependencies

rm $script_dependencies_file 2> /dev/null
touch $script_dependencies_file
chmod 750 $script_dependencies_file

echo '#!/bin/bash' >> $script_dependencies_file
echo '' >> $script_dependencies_file
echo 'export OpenViBE_dependencies='$ov_depend_folder >> $script_dependencies_file
echo '' >> $script_dependencies_file
echo 'export PKG_CONFIG_PATH='$ov_depend_folder'/lib/pkgconfig:$PKG_CONFIG_PATH:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig' >> $script_dependencies_file
echo 'export LD_LIBRARY_PATH='$ov_depend_folder'/lib:$LD_LIBRARY_PATH' >> $script_dependencies_file
echo 'export PATH='$ov_depend_folder'/bin:$PATH' >> $script_dependencies_file
echo '' >> $script_dependencies_file
echo 'export BOOST_ROOT='$ov_depend_folder'/include/boost_1_34_1' >> $script_dependencies_file
echo 'export GTK2_RC_FILES='$ov_depend_folder'/share/themes/Clearlooks/gtk-2.0/gtkrc' >> $script_dependencies_file

source $script_dependencies_file

echo "============================================================="
echo "PATH            : $PATH"
echo "LD_LIBRARY_PATH : $LD_LIBRARY_PATH"
echo "PKG_CONFIG_PATH : $PKG_CONFIG_PATH"

####################################
##
##  creates dependency directory when needed
##
####################################

	mkdir "$ov_depend_folder" 2> /dev/null
	mkdir "$ov_archives_folder" 2> /dev/null
	mkdir "$ov_tmp_folder" 2> /dev/null
	mkdir "$ov_log_folder" 2> /dev/null
	mkdir "$ov_hit_folder" 2> /dev/null

####################################
##
##  installation scripts
##
####################################

function ov_untar_configure_make_install_package
{
	# $1 is package name
	#
	# package archive name is supposed to be             $ov_($1)_archive_name
	# package url is supposed to be                      $ov_($1)_url
	# additional configure parameters are supposed to be $ov_($1)_additional_configure_flags

	eval 'ov_current_package='$1
	eval 'ov_current_package_should_build_flag=$ov_should_build_'$1'_flag'
	eval 'ov_current_package_log_file=$ov_log_folder/'$1'.log'
	eval 'ov_current_package_hit_file=$ov_hit_folder/'$1'.hit'
	eval 'ov_current_package_archive_name=$ov_dep_'$1'_archive_name'
	eval 'ov_current_package_url=$ov_dep_'$1'_url'
	eval 'ov_current_package_additional_configure_flags=$ov_dep_'$1'_additional_configure_flags'

	eval 'ov_current_package_hook_download=$ov_dep_'$1'_hook_download'
	eval 'ov_current_package_hook_download_pre=$ov_dep_'$1'_hook_download_pre'
	eval 'ov_current_package_hook_download_post=$ov_dep_'$1'_hook_download_post'
	eval 'ov_current_package_hook_checkout=$ov_dep_'$1'_hook_checkout'
	eval 'ov_current_package_hook_checkout_pre=$ov_dep_'$1'_hook_checkout_pre'
	eval 'ov_current_package_hook_checkout_post=$ov_dep_'$1'_hook_checkout_post'
	eval 'ov_current_package_hook_uncompress=$ov_dep_'$1'_hook_uncompress'
	eval 'ov_current_package_hook_uncompress_pre=$ov_dep_'$1'_hook_uncompress_pre'
	eval 'ov_current_package_hook_uncompress_post=$ov_dep_'$1'_hook_uncompress_post'
	eval 'ov_current_package_hook_configure=$ov_dep_'$1'_hook_configure'
	eval 'ov_current_package_hook_configure_pre=$ov_dep_'$1'_hook_configure_pre'
	eval 'ov_current_package_hook_configure_post=$ov_dep_'$1'_hook_configure_post'
	eval 'ov_current_package_hook_make=$ov_dep_'$1'_hook_make'
	eval 'ov_current_package_hook_make_pre=$ov_dep_'$1'_hook_make_pre'
	eval 'ov_current_package_hook_make_post=$ov_dep_'$1'_hook_make_post'
	eval 'ov_current_package_hook_install=$ov_dep_'$1'_hook_install'
	eval 'ov_current_package_hook_install_pre=$ov_dep_'$1'_hook_install_pre'
	eval 'ov_current_package_hook_install_post=$ov_dep_'$1'_hook_install_post'

	ov_current_operation_result=0
	ov_current_operation_hook_result=0
	ov_current_operation_hook_pre_result=0
	ov_current_operation_hook_post_result=0

	if [ "$ov_current_package_should_build_flag" == "true" ]; then

		if [ ! -e "$ov_current_package_hit_file" ]; then

			echo "Trying to install package [$ov_current_package]..."

			# goes to temporary folder
			pushd "$ov_tmp_folder" >> $ov_current_package_log_file 2>&1

			# empties temporary folder
			rm -rf *

			# resets log file
			touch $ov_current_package_log_file

			# downloads package archive when needed
			echo "  Downloading [$ov_current_package_url]..."
			if [[ "$ov_should_skip_download" == "true" && -e "$ov_current_package_archive_name" ]]; then
				echo "  Downloading [$ov_current_package_url] succeeded... (cached)"
			else
				if [ ! "$ov_current_package_hook_download" == "" ]; then
					# completely replace download phase with hook
					`eval $ov_current_package_hook_download >> $ov_current_package_log_file 2>&1`
					ov_current_operation_hook_result=$?
				else
					# executes download hook pre 
					`eval $ov_current_package_hook_download_pre >> $ov_current_package_log_file 2>&1`
					ov_current_operation_hook_pre_result=$?
					# effectively download file
					$ov_wget -c -O "$ov_current_package_archive_name" $ov_current_package_url >> $ov_current_package_log_file 2>&1
					ov_current_operation_result=$?
					# executes download hook post
					`eval $ov_current_package_hook_download_post >> $ov_current_package_log_file 2>&1`
					ov_current_operation_hook_post_result=$?
				fi;
				if [[ $ov_current_operation_result -eq 0 && $ov_current_operation_hook_result -eq 0 && $ov_current_operation_hook_pre_result -eq 0 && $ov_current_operation_hook_post_result -eq 0 ]]; then
					echo "  Downloading [$ov_current_package_url] succeeded..."
				else
					echo "  Downloading [$ov_current_package_url] failed !"
					exit
				fi;
			fi;

			# decompresses package archive in temporary folder
			echo "  Uncompressing [$ov_current_package_archive_name]..."
			if [ ! "$ov_current_package_hook_uncompress" == "" ]; then
				# completely replace uncompress phase with hook
				`eval $ov_current_package_hook_uncompress >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_result=$?
			else
				# trying to figure out what kind of archive to decompress
				ov_package_type=`echo $ov_current_package_archive_name | $ov_sed '
					s/\(.*\)\.\(tar\.\)/\2/g'`
				case $ov_package_type in
					"tar.gz")
						ov_decompress_command="$ov_tar xvfz"
						;;
					"tar.bz2")
						ov_decompress_command="$ov_tar xvfj"
						;;
					*)
						echo "  Uhandled file extension [$ov_current_package_archive_name], sorry (may you try hook system ?) !"
						exit
						;;
				esac;
				# executes uncompress hook pre 
				`eval $ov_current_package_hook_uncompress_pre >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_pre_result=$?
				# effectively uncompress file
				$ov_decompress_command "$ov_current_package_archive_name" >> $ov_current_package_log_file 2>&1
				ov_current_operation_result=$?
				# executes uncompress hook post
				`eval $ov_current_package_hook_uncompress_post >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_post_result=$?
			fi;
			if [[ $ov_current_operation_result -eq 0 && $ov_current_operation_hook_result -eq 0 && $ov_current_operation_hook_pre_result -eq 0 && $ov_current_operation_hook_post_result -eq 0 ]]; then
				echo "  Uncompressing [$ov_current_package_archive_name] succeeded..."
			else
				echo "  Uncompressing [$ov_current_package_archive_name] failed !"
				exit
			fi;

			# configures the package
			echo "  Configuring [$ov_current_package]..."
			if [ ! "$ov_current_package_hook_configure" == "" ]; then
				# completely replace configure phase with hook
				`eval $ov_current_package_hook_configure >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_result=$?
			else
				# executes configure hook pre 
				`eval $ov_current_package_hook_configure_pre >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_pre_result=$?
				# effectively configure file
				pushd * >> $ov_current_package_log_file 2>&1
				./configure --prefix=$ov_depend_folder CPPFLAGS="-I$ov_depend_folder/include" LDFLAGS="-L$ov_depend_folder/lib" $ov_current_package_additional_configure_flags >> $ov_current_package_log_file 2>&1
				popd >> $ov_current_package_log_file 2>&1
				ov_current_operation_result=$?
				# executes configure hook post
				`eval $ov_current_package_hook_configure_post >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_post_result=$?
			fi;
			if [[ $ov_current_operation_result -eq 0 && $ov_current_operation_hook_result -eq 0 && $ov_current_operation_hook_pre_result -eq 0 && $ov_current_operation_hook_post_result -eq 0 ]]; then
				echo "  Configuring [$ov_current_package] succeeded..."
			else
				echo "  Configuring [$ov_current_package] failed !"
				exit
			fi;

			# builds the package
			echo "  Building [$ov_current_package]..."
			if [ ! "$ov_current_package_hook_make" == "" ]; then
				# completely replace make phase with hook
				`eval $ov_current_package_hook_make >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_result=$?
			else
				# executes make hook pre 
				`eval $ov_current_package_hook_make_pre >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_pre_result=$?
				# effectively make file
				pushd * >> $ov_current_package_log_file 2>&1
				$ov_make >> $ov_current_package_log_file 2>&1
				popd >> $ov_current_package_log_file 2>&1
				ov_current_operation_result=$?
				# executes make hook post
				`eval $ov_current_package_hook_make_post >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_post_result=$?
			fi;
			if [[ $ov_current_operation_result -eq 0 && $ov_current_operation_hook_result -eq 0 && $ov_current_operation_hook_pre_result -eq 0 && $ov_current_operation_hook_post_result -eq 0 ]]; then
				echo "  Building [$ov_current_package] succeeded..."
			else
				echo "  Building [$ov_current_package] failed !"
				exit
			fi;

			# installs the package
			echo "  Installing [$ov_current_package]..."
			if [ ! "$ov_current_package_hook_install" == "" ]; then
				# completely replace install phase with hook
				`eval $ov_current_package_hook_install >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_result=$?
			else
				# executes install hook pre 
				`eval $ov_current_package_hook_install_pre >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_pre_result=$?
				# effectively install file
				pushd * >> $ov_current_package_log_file 2>&1
				$ov_make install >> $ov_current_package_log_file 2>&1
				popd >> $ov_current_package_log_file 2>&1
				ov_current_operation_result=$?
				# executes install hook post
				`eval $ov_current_package_hook_install_post >> $ov_current_package_log_file 2>&1`
				ov_current_operation_hook_post_result=$?
			fi;
			if [[ $ov_current_operation_result -eq 0 && $ov_current_operation_hook_result -eq 0 && $ov_current_operation_hook_pre_result -eq 0 && $ov_current_operation_hook_post_result -eq 0 ]]; then
				echo "  Installing [$ov_current_package] succeeded..."
			else
				echo "  Installing [$ov_current_package] failed !"
				exit
			fi;

			# hits this package
			touch "$ov_current_package_hit_file"

			# goes back to calling folder
			popd >> $ov_current_package_log_file 2>&1

		else

			echo "Package [$ov_current_package] is already built, skipped..."

		fi;

	else

		echo "Package [$ov_current_package] is not declared as needed, skipped..."

	fi;
}

function ov_untar_install_package
{
	# $1 is package name
	#
	# package archive name is supposed to be             $ov_($1)_archive_name
	# package url is supposed to be                      $ov_($1)_url

	eval 'ov_current_package='$1
	eval 'ov_current_package_should_build_flag=$ov_should_build_'$1'_flag'
	eval 'ov_current_package_log_file=$ov_log_folder/'$1'.log'
	eval 'ov_current_package_hit_file=$ov_hit_folder/'$1'.hit'
	eval 'ov_current_package_archive_name=$ov_dep_'$1'_archive_name'
	eval 'ov_current_package_url=$ov_dep_'$1'_url'

	if [ "$ov_current_package_should_build_flag" == "true" ]; then

		if [ ! -e "$ov_current_package_hit_file" ]; then

			echo "Trying to install package [$ov_current_package]..."

			# goes to temporary folder
			pushd "$ov_tmp_folder" >> $ov_current_package_log_file 2>&1

			# empties temporary folder
			rm -rf *

			# resets log file
			touch $ov_current_package_log_file

			# downloads package archive when needed
			echo "  Downloading [$ov_current_package_url]..."
			if [[ "$ov_should_skip_download" == "true" && -e "$ov_current_package_archive_name" ]]; then
				echo "  Downloading [$ov_current_package_url] succeeded... (cached)"
			else
				$ov_wget -c -O "$ov_current_package_archive_name" $ov_current_package_url >> $ov_current_package_log_file 2>&1
				if [ $? -eq 0 ]; then
					echo "  Downloading [$ov_current_package_url] succeeded..."
				else
					echo "  Downloading [$ov_current_package_url] failed !"
					exit
				fi;
			fi;

			# trying to find out what kind of archive to decompress
			ov_package_type=`echo $ov_current_package_archive_name | $ov_sed '
				s/\(.*\)\.\(tar\.\)/\2/g
				'`
			case $ov_package_type in
				"tar.gz")
					ov_tar_flags=xvfz
					;;
				"tar.bz2")
					ov_tar_flags=xvfj
					;;
				*)
					echo "  Uhandled file extension [$ov_current_package_archive_name], sorry !"
					exit
					;;
			esac;

			# decompresses package archive in temporary folder
			echo "  Uncompressing [$ov_current_package_archive_name]..."
			$ov_tar $ov_tar_flags "$ov_current_package_archive_name" >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Uncompressing [$ov_current_package_archive_name] succeeded..."
			else
				echo "  Uncompressing [$ov_current_package_archive_name] failed !"
				exit
			fi;

			# enters decompressed directory (should only be one)
			cd *

			# installs the package
			echo "  Installing [$ov_current_package]..."
			cp -rfv * $ov_depend_folder >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Installing [$ov_current_package] succeeded..."
			else
				echo "  Installing [$ov_current_package] failed !"
				exit
			fi;

			# hits this package
			touch "$ov_current_package_hit_file"

			# goes back to calling folder
			popd >> $ov_current_package_log_file 2>&1

		else

			echo "Package [$ov_current_package] is already built, skipped..."

		fi;

	else

		echo "Package [$ov_current_package] is not declared as needed, skipped..."

	fi;
}

function ov_svn_configure_make_install_package
{
	# $1 is package name
	#
	# package archive name is supposed to be             $ov_($1)_archive_name
	# package url is supposed to be                      $ov_($1)_url
	# additional configure parameters are supposed to be $ov_($1)_additional_configure_flags

	eval 'ov_current_package='$1
	eval 'ov_current_package_should_build_flag=$ov_should_build_'$1'_flag'
	eval 'ov_current_package_log_file=$ov_log_folder/'$1'.log'
	eval 'ov_current_package_hit_file=$ov_hit_folder/'$1'.hit'
	eval 'ov_current_package_archive_name=$ov_dep_'$1'_archive_name'
	eval 'ov_current_package_url=$ov_dep_'$1'_url'
	eval 'ov_current_package_additional_configure_flags=$ov_dep_'$1'_additional_configure_flags'

	if [ "$ov_current_package_should_build_flag" == "true" ]; then

		if [ ! -e "$ov_current_package_hit_file" ]; then

			echo "Trying to install package [$ov_current_package]..."

			# goes to temporary folder
			pushd "$ov_tmp_folder" >> $ov_current_package_log_file 2>&1

			# empties temporary folder
			rm -rf *

			# resets log file
			touch $ov_current_package_log_file

			# checkouts package
			echo "  Downloading [$ov_current_package_url]..."
			$ov_svn checkout $ov_current_package_url >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Downloading [$ov_current_package_url] succeeded..."
			else
				echo "  Downloading [$ov_current_package_url] failed !"
				exit
			fi;

			# enters decompressed directory (should only be one)
			cd *

			# configures the package
			echo "  Configuring [$ov_current_package]..."
			./configure --prefix=$ov_depend_folder CPPFLAGS="-I$ov_depend_folder/include" LDFLAGS="-L$ov_depend_folder/lib" $ov_current_package_additional_configure_flags >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Configuring [$ov_current_package] succeeded..."
			else
				echo "  Configuring [$ov_current_package] failed !"
				exit
			fi;

			# builds the package
			echo "  Building [$ov_current_package]..."
			$ov_make >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Building [$ov_current_package] succeeded..."
			else
				echo "  Building [$ov_current_package] failed !"
				exit
			fi;

			# installs the package
			echo "  Installing [$ov_current_package]..."
			$ov_make install >> $ov_current_package_log_file 2>&1
			if [ $? -eq 0 ]; then
				echo "  Installing [$ov_current_package] succeeded..."
			else
				echo "  Installing [$ov_current_package] failed !"
				exit
			fi;

			# hits this package
			touch "$ov_current_package_hit_file"

			# goes back to calling folder
			popd >> $ov_current_package_log_file 2>&1

		else

			echo "Package [$ov_current_package] is already built, skipped..."

		fi;

	else

		echo "Package [$ov_current_package] is not declared as needed, skipped..."

	fi;
}

####################################
##
##  installation script excution
##
####################################

echo "============================================================="
ov_untar_configure_make_install_package "pkgconfig"
ov_untar_install_package "cmake"
ov_untar_configure_make_install_package "boost"
ov_untar_configure_make_install_package "expat"
ov_untar_configure_make_install_package "gettext"
ov_untar_configure_make_install_package "glib"
ov_untar_configure_make_install_package "libxml"
ov_untar_configure_make_install_package "zlib"
ov_untar_configure_make_install_package "libpng"
ov_untar_configure_make_install_package "libxproto"
ov_untar_configure_make_install_package "libxextproto"
ov_untar_configure_make_install_package "libxtrans"
ov_untar_configure_make_install_package "libxslt"
ov_untar_configure_make_install_package "libxau"
ov_untar_configure_make_install_package "pthreadstubs"
ov_untar_configure_make_install_package "libxcbproto"
ov_untar_configure_make_install_package "libxcb"
ov_untar_configure_make_install_package "libkbproto"
ov_untar_configure_make_install_package "libinputproto"
ov_untar_configure_make_install_package "libxdmcp"
ov_untar_configure_make_install_package "libx11"
ov_untar_configure_make_install_package "libxext"
ov_untar_configure_make_install_package "freetype"
ov_untar_configure_make_install_package "fontconfig"
ov_untar_configure_make_install_package "renderproto"
ov_untar_configure_make_install_package "libxdmcp"
ov_untar_configure_make_install_package "libxrender"
ov_untar_configure_make_install_package "cairo"
ov_untar_configure_make_install_package "pango"
ov_untar_configure_make_install_package "atk"
ov_untar_configure_make_install_package "gtk"
ov_untar_configure_make_install_package "clearlooks"
ov_untar_configure_make_install_package "libglade"
ov_untar_configure_make_install_package "glade"
ov_untar_configure_make_install_package "libtool"
ov_untar_configure_make_install_package "itpp_external"
ov_untar_configure_make_install_package "itpp"
ov_untar_configure_make_install_package "gsl"
ov_untar_configure_make_install_package "torch"
ov_untar_configure_make_install_package "vrpn"
ov_svn_configure_make_install_package "openmask"

####################################

popd
