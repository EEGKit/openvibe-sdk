# ---------------------------------
# Finds Certivibe binary distribution
# Adds library to target
# Adds include path
# ---------------------------------
option(DYNAMIC_LINK_CERTIVIBE "Dynamically link Certivibe" ON)

if(DYNAMIC_LINK_CERTIVIBE)
	set(CERTIVIBE_LINKING "")
	add_definitions(-DOV_Shared)
	add_definitions(-DEBML_Shared)
	add_definitions(-DFS_Shared)
	add_definitions(-DSocket_Shared)
	add_definitions(-DSystem_Shared)
	add_definitions(-DXML_Shared)
	add_definitions(-DOVTK_Shared)
	ADD_DEFINITIONS(-DCSV_Shared)
	ADD_DEFINITIONS(-DDATE_Shared)
else()
	set(CERTIVIBE_LINKING "-static")
	add_definitions(-DEBML_Static)
	add_definitions(-DFS_Static)
	add_definitions(-DSocket_Static)
	add_definitions(-DSystem_Static)
	add_definitions(-DXML_Static)
	add_definitions(-DOVTK_Static)
	ADD_DEFINITIONS(-DCSV_Static)
	ADD_DEFINITIONS(-DDATE_Static)
endif()

MESSAGE(${INCLUDED_CERTIVIBE_COMPONENTS})

IF("${INCLUDED_CERTIVIBE_COMPONENTS}" STREQUAL "ALL")
	LIST(REMOVE_ITEM INCLUDED_CERTIVIBE_COMPONENTS "ALL")
	LIST(APPEND INCLUDED_CERTIVIBE_COMPONENTS BASE ALLPLUGINS ALLMODULES)
ENDIF()

IF(BASE IN_LIST INCLUDED_CERTIVIBE_COMPONENTS)
	LIST(REMOVE_ITEM INCLUDED_CERTIVIBE_COMPONENTS BASE)
	LIST(APPEND INCLUDED_CERTIVIBE_COMPONENTS MAIN KERNEL)	
ENDIF()

IF(ALLPLUGINS IN_LIST INCLUDED_CERTIVIBE_COMPONENTS)
	LIST(REMOVE_ITEM INCLUDED_CERTIVIBE_COMPONENTS ALLPLUGINS)
	LIST(APPEND INCLUDED_CERTIVIBE_COMPONENTS CLASSIFICATION DATA_GENERATION FEATURE_EXTRACTION FILE_IO SIGNAL_PROCESSING STIMULATION STREAM_CODECS STREAMING TOOLS)
ENDIF()

IF(ALLMODULES IN_LIST INCLUDED_CERTIVIBE_COMPONENTS)
	LIST(REMOVE_ITEM INCLUDED_CERTIVIBE_COMPONENTS ALLMODULES)
	LIST(APPEND INCLUDED_CERTIVIBE_COMPONENTS EBML SYSTEM FS SOCKET XML TOOLKIT)
ENDIF()

set(CERTIVIBE_DIRECTORY ${OPENVIBE_SDK_PATH})

set(PATH_CERTIVIBE "PATH_CERTIVIBE-NOTFOUND")
find_path(PATH_CERTIVIBE include/openvibe/ov_all.h PATHS ${CERTIVIBE_DIRECTORY} NO_DEFAULT_PATH)
if(${PATH_CERTIVIBE} STREQUAL "PATH_CERTIVIBE-NOTFOUND")
	message(FATAL_ERROR "  FAILED to find Certivibe [${PATH_CERTIVIBE}]")
endif()

debug_message( "  Found Certivibe... [${PATH_CERTIVIBE}]")

include_directories(${PATH_CERTIVIBE}/include/)# TODO ?

IF(WIN32)
	SET(LIB_PREFIX "")
	SET(ORIG_LIB_DIR bin)
	SET(DEST_LIB_DIR  ${CMAKE_INSTALL_FULL_BINDIR})
	SET(LIB_EXT lib)
	SET(DLL_EXT dll)
	install(DIRECTORY ${PATH_CERTIVIBE}/bin/ DESTINATION ${CMAKE_INSTALL_FULL_BINDIR} FILES_MATCHING PATTERN "*cmd")
ELSEIF(UNIX)
	SET(UNIX_LIB_PREFIX lib)
	SET(ORIG_LIB_DIR lib)
	SET(DEST_LIB_DIR ${CMAKE_INSTALL_FULL_LIBDIR})
	set(LIB_EXT "so")
	IF(APPLE)
		set(LIB_EXT "dylib")
	ENDIF()
	SET(DLL_EXT "${LIB_EXT}*")
ENDIF()

FUNCTION(ADD_COMPONENT TOKEN MODULE_NAME COMPILE_FLAG)
	MESSAGE(INFO ${TOKEN} ${MODULE_NAME} ${COMPILE_FLAG})
	IF(${TOKEN} IN_LIST INCLUDED_CERTIVIBE_COMPONENTS)
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} "${PATH_CERTIVIBE}/lib/${LIB_PREFIX}${MODULE_NAME}${CERTIVIBE_LINKING}.${LIB_EXT}")
		INSTALL(DIRECTORY ${PATH_CERTIVIBE}/${ORIG_LIB_DIR}/ DESTINATION ${DEST_LIB_DIR} FILES_MATCHING PATTERN "*${MODULE_NAME}*${DLL_EXT}")
		IF(NOT COMPILE_FLAG STREQUAL "")
			add_definitions(-D${COMPILE_FLAG})
		ENDIF()
	ENDIF()
ENDFUNCTION(ADD_COMPONENT)

ADD_COMPONENT(MAIN "openvibe" "TARGET_HAS_OpenViBE") #TODO TARGET_HAS_
ADD_COMPONENT(KERNEL "openvibe-kernel" "") #TODO TARGET_HAS_
ADD_COMPONENT(TOOLKIT "openvibe-toolkit" "TARGET_HAS_OpenViBEToolkit")

#modules
ADD_COMPONENT(EBML "openvibe-module-ebml" "TARGET_HAS_EBML")
ADD_COMPONENT(SYSTEM "openvibe-module-system" "TARGET_HAS_System")
ADD_COMPONENT(FS "openvibe-module-fs" "TARGET_HAS_FS")
ADD_COMPONENT(SOCKET "openvibe-module-socket" "TARGET_HAS_Socket")
ADD_COMPONENT(XML "openvibe-module-xml" "TARGET_HAS_XML")
ADD_COMPONENT(CSV "openvibe-module-csv" "TARGET_HAS_CSV")
ADD_COMPONENT(DATE "openvibe-module-date" "TARGET_HAS_DATE")
ADD_COMPONENT(STREAM "openvibe-module-stream" "TARGET_HAS_Stream") #Any reason why it isn't caps ?

#plugins
ADD_COMPONENT(CLASSIFICATION "certivibe-plugins-classification" "") #TODO TARGET_HAS_
ADD_COMPONENT(DATA_GENERATION "certivibe-plugins-data-generation" "") #TODO TARGET_HAS_
ADD_COMPONENT(FEATURE_EXTRACTION "certivibe-plugins-feature-extraction" "") #TODO TARGET_HAS_
ADD_COMPONENT(FILE_IO "certivibe-plugins-file-io" "") #TODO TARGET_HAS_
ADD_COMPONENT(SIGNAL_PROCESSING "certivibe-plugins-signal-processing" "") #TODO TARGET_HAS_
ADD_COMPONENT(STIMULATION "certivibe-plugins-stimulation" "") #TODO TARGET_HAS_
ADD_COMPONENT(STREAM_CODECS "certivibe-plugins-stream-codecs" "") #TODO TARGET_HAS_
ADD_COMPONENT(STREAMING "certivibe-plugins-streaming" "") #TODO TARGET_HAS_
ADD_COMPONENT(TOOLS "certivibe-plugins-tools" "") #TODO TARGET_HAS_

add_definitions(-DTARGET_HAS_ThirdPartyOpenViBEPluginsGlobalDefines)

# if we link with the module socket in Static, we must link the project with the dependency on win32
if(WIN32 AND NOT DYNAMIC_LINK_CERTIVIBE)
	include("FindThirdPartyWinsock2")
	include("FindThirdPartyFTDI")
endif()

install(DIRECTORY ${PATH_CERTIVIBE}/${ORIG_LIB_DIR}/ DESTINATION ${DEST_LIB_DIR} FILES_MATCHING 
	PATTERN "*${DLL_EXT}" 
	PATTERN "*module*" EXCLUDE
	PATTERN "*plugins*" EXCLUDE)

install(DIRECTORY ${PATH_CERTIVIBE}/share/ DESTINATION ${CMAKE_INSTALL_FULL_DATADIR})

