#!/bin/bash

# This is the build script to configure and build OpenViBE on
# unix-based platform.
# Usage: ./unix-build [options]
# Optional parameters:
# -h |--help : usage
# -v | --verbose : verbose output at build step
# --build-type=<Debug|Release|RelWithDebInfo> : build type
# --build-dir=<dirname> : build directory
# --install-dir=<dirname> : binaries deployment directory
# --test-data-dir=<dirname> : test data directory

# Functions definition
 
function usage()
{
		echo "usage: ./unix-build [options]"
		echo ""
		echo "-h | --help : usage"
		echo "-v | --verbose : verbose output at building step"
		echo "--build-type=<Debug|Release|RelWithDebInfo> : build type"
		echo "--build-dir=<dirname> : build directory"
		echo "--install-dir=<dirname> : binaries deployment directory"
		echo "--test-data-dir=<dirname> : test data directory"
}

# Script starting point

# As options are not mandatory, set some default values for each target
# variables
ov_script_dir="${PWD}"
ov_build_type=Debug
ov_build_dir="${ov_script_dir}/../../certivibe-build/build-${ov_build_type}"
ov_install_dir="${ov_script_dir}/../../certivibe-build/dist-${ov_build_type}"
ov_test_data_dir="${ov_script_dir}/../dependencies/test-data"
verbose=0

# Parse arguments
for i in "$@"
do
	case $i in
		-h | --help)
			usage
			exit
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		--build-type=*)
			ov_build_type="${i#*=}"
			shift
			;;
		--build-dir=*)
			ov_build_dir="${i#*=}"
			shift
			;;
		--install-dir=*)
			ov_install_dir="${i#*=}"
			shift
			;;
		--test-data-dir=*)
			ov_test_data_dir="${i#*=}"
			shift
			;;
		*)
			echo "ERROR: Unknown parameter $i"
			exit 1
			;;
	esac
done

# Check parameters validity
if [[ ${ov_build_type} != "Debug" ]] \
	&& [[ ${ov_build_type} != "Release" ]] \
	&& [[ ${ov_build_type} != "RelWithDebInfo" ]]
then
	echo "ERROR: ${ov_build_type} not handled as build type"
	exit 1
fi

echo "**************************************"
echo "Build with parameters:"
echo "[build-type] = ${ov_build_type}"
echo "[build-dir] = ${ov_build_dir}"
echo "[install-dir] = ${ov_install_dir}"
echo "[test-data-dir] = ${ov_test_data_dir}"
echo "**************************************"
echo ""
echo ""

# Special configuration for MacOS
uname_string=$(uname)

if [[ "$uname_string" == 'Darwin' ]]; then
  export PKG_CONFIG_PATH="/opt/X11/lib/pkgconfig:$PKG_CONFIG_PATH"
fi

# Create necessary directories
mkdir -p "${ov_build_dir}" &> /dev/null

# Change directory to build directory as cmake has to be run from build
# directory
pushd "${ov_build_dir}" &> /dev/null

echo "Generating build system files with cmake..."

cmake ${ov_script_dir}/.. \
		-G Ninja \
		-DCMAKE_BUILD_TYPE=${ov_build_type} \
		-DCMAKE_INSTALL_PREFIX=${ov_install_dir} \
		-DOVT_TEST_DATA_DIR=${ov_test_data_dir}


if [[ $? == 0 ]]; then
	echo "Generation succeeded!"
else
	echo "ERROR: Generation failed"
	exit 1
fi

echo "Building project..."

if [[ $verbose == 1 ]]; then
	ninja -v install
else 
	ninja install
fi

if [[ $? == 0 ]]; then
	echo "Build succeeded!"
else
	echo "ERROR: Build failed"
	exit 1
fi

popd &> /dev/null

exit
