#!usr/bin/env python
####################################################################
# INRIA and MENSIA TECHNOLOGIES SA, CONFIDENTIAL
#
# CertiViBE Test Software
# Copyright Inria and Mensia Technologies SA, 2015-2017
# All Rights Reserved
#
# Author
#
# NOTICE: All information contained herein is, and remains
# the property of Mensia Technologies SA and Inria.
# The intellectual and technical concepts contained
# herein are proprietary to Mensia Technologies SA and Inria,
# and are covered copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Mensia Technologies SA and Inria.
####################################################################

import numpy as np
import pandas as pd
from csv_test import CsvLibrary
from mensiasigpro.compare import compare_two_arrays
from mensiasigpro.spatial_filtering import spatial_filter


class SpatialFilter(object):
    def __init__(self):
        pass

    def spatial_filter_reference(self, input_signal_csv, spatial_signal_csv,
                                 spatial_coefficient, test_name, test_temporary_dir):
        """This creates a keyword named "Spatial filter reference"
        The goal is to compare a spatial filtered value previously computed with the spatial filtered value computed now.

        :param input_signal_csv: source signal to be averaged
        :param spatial_signal_csv: signal already computed by external tool
        :param spatial_coefficient: coefficient of the spatial filter
        :param test_name: test name
        :param test_temporary_dir: directory with all files generated during the test
        :return: path of output csv file (filtered signal)

        :raise AssertionError: raise an exception if there is a difference between the box result and the computation result.
        This also generate an output csv file with the computation results for investigations.

        Example:

        Compare the result generated by the box spatial filter
        Input file: 2chan.csv
        Output file: 2chan_box_result.csv
        directory ot the output file: /home/certivibe/testoutput
        Robot framework test name:  2_channels_test
        input channels: 2
        spatial coefficient: 10;10;1;0;10;10;0;1

        Case 1: The box spatial filter computation is good, the keyword won't raise anything.
        | the spatial filter box should compute well | 2chan.csv | 2chan_box_result.csv | 2 | 10;10;1;0;10;10;0;1 | 2_channels_test | /home/certivibe/testoutput |

        Case 2: The box signal average computation is wrong, the keyword will raise an exception
        and create an csv file:"2_channels_test.csv" in the test temporary directory.
        | the spatial filter box should compute well | 2chan.csv | 2chan_box_result.csv | 2 | 10;10;1;0;10;10;0;1 | 2_channels_test | /home/certivibe/testoutput |

        """

        # Create data frame
        input = CsvLibrary.read_openvibe_csv_file(input_signal_csv)
        output_box = CsvLibrary.read_openvibe_csv_file(spatial_signal_csv)
        spatial_coefficient = spatial_coefficient.split(sep=";")
        spatial_coefficient = [int(i) for i in spatial_coefficient]

        # Provide a data frame with the computed value
        computed_data = spatial_filter(input, spatial_coefficient)

        channel_list = list(output_box.columns.values)
        df_computed_data = pd.DataFrame(computed_data, columns=channel_list)
        path_output_reference = test_temporary_dir + test_name + '.csv'
        df_computed_data.to_csv(path_output_reference, sep=';')
 
        return path_output_reference
