project(openvibe-plugins-sdk-stimulation VERSION ${OPENVIBE_MAJOR_VERSION}.${OPENVIBE_MINOR_VERSION}.${OPENVIBE_PATCH_VERSION})

file(GLOB_RECURSE SRC_FILES src/*.cpp src/*.h src/*.hpp src/*.inl)
include("FindSourceRCProperties")

add_library(${PROJECT_NAME} SHARED ${SRC_FILES})

target_link_libraries(${PROJECT_NAME}
                      openvibe
                      openvibe-common
                      openvibe-toolkit
                      openvibe-module-ebml
                      openvibe-module-system
                      openvibe-module-fs
                      Boost::boost
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION ${PROJECT_VERSION_MAJOR}
    FOLDER ${PLUGINS_FOLDER}
    COMPILE_FLAGS "-DOVP_Exports -DOVP_Shared")
    
add_definitions(-DTARGET_HAS_ThirdPartyOpenViBEPluginsGlobalDefines)

# ---------------------------------
# Finds standard library winmm
# Adds library to target
# Adds include path
# ---------------------------------
if(WIN32)
    find_library(LIB_STANDARD_MODULE_WINMM winmm)
    if(LIB_STANDARD_MODULE_WINMM)
        message(STATUS "  Found winmm...")
        target_link_libraries(${PROJECT_NAME} ${LIB_STANDARD_MODULE_WINMM})
    else(LIB_STANDARD_MODULE_WINMM)
        message(STATUS "  FAILED to find winmm...")
    endif(LIB_STANDARD_MODULE_WINMM)
endif(WIN32)

# ---------------------------------
# Target macros
# Defines target operating system, architecture and compiler
# ---------------------------------
SET_BUILD_PLATFORM()

# -----------------------------
# Install files
# -----------------------------
install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION ${DIST_BINDIR}
        LIBRARY DESTINATION ${DIST_LIBDIR}
        ARCHIVE DESTINATION ${DIST_LIBDIR})
