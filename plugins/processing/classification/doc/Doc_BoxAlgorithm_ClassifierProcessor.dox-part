/**
 * \page BoxAlgorithm_ClassifierProcessor Classifier processor
__________________________________________________________________

Detailed description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Description|
The <em>Classifier Processor</em> box is a generic box for classification purpose. It works
in conjunction with the \ref Doc_BoxAlgorithm_ClassifierTrainer box.
This box' role is to expose a generic interface to the rest of the BCI pipelines. The tasks
specific to a given classifier are forwarded to one of the registered \c OVTK_TypeId_ClassifierAlgorithm
algorithms. The behaviour is simple, at initialization phase, the classification algorithm is initialized
and its configuration is loaded from the configuration file. Then each time this box receives a new
feature vector, it is forwarded to the classification algorithm that classifies it. The box gets the algorithm
status and the actual class value and translates this information to its output. The class is sent in the form of
a stimulation and the algorithm status is sent in the form a streamed matrix. The stimulation can be generically
interpreted by the rest of the pipeline but it is important to understand that each classification algorithm is
free to report whatever it wants in its "status matrix". Consequently, the use of this output stream will be
dependent on the chosen classification algorithm. For example, the LDA classifier sends the hyperplane distance
value as its status.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Description|
__________________________________________________________________

Inputs description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Inputs|
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Inputs|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Input1|
This input should be connected to the feature vectors to classify. Each time a new feature vector arrives,
a classification process will be triggered. Consequently, a classification stimulation will be sent on the
first output of this box.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Input1|
__________________________________________________________________

Outputs description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Outputs|
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Outputs|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Output1|
This output will contain the classification stimulations. Each time a new feature vector arrives to this box,
a new classification process is triggered, resulting in the generation of the corresponding class stimulation.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Output1|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Output2|
This output reflects the classification algorithm status in the form of a matrix of value. The content of this
matrix is dependent of the chosen classification algorithm. For example, the LDA classifier sends the hyperplane
distance as its status. Given that this value is dependent of the chosen algorithm, you should be very carefull
with the use of this output stream. Unexepected behavior may (will) occur when changing the classifier.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Output2|
__________________________________________________________________

Settings description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Settings|
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Settings|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Setting1|
The first setting of this box is the classifier to use. You have to choose the same classifier as the one you used
during the training phase with the \ref Doc_BoxAlgorithm_ClassifierTrainer box.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Setting1|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Setting2|
This setting points to the configuration file of the algorithm. This configuration file is generally generated from the
\ref Doc_BoxAlgorithm_ClassifierTrainer box. Its syntax depends on the selected algorithm.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Setting2|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Setting3|
For classification algorithms that support rejection, you can choose a stimulation that reflects the feature vector
could not be classified.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Setting3|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Setting4|
This is the stimulation to send when the classifier algorithm detects a class-1 feature vector
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Setting4|

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Setting5|
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Setting5|
__________________________________________________________________

Examples description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Examples|
This box is used in BCI pipelines in order to classify cerebral activity states. For a detailed scenario using this
box and its associated \ref Doc_BoxAlgorithm_ClassifierTrainer, please see the <b>motor imagary</b>
BCI scenario in the sample scenarios.
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Examples|
__________________________________________________________________

Miscellaneous description
__________________________________________________________________

 * |OVP_DocBegin_BoxAlgorithm_ClassifierProcessor_Miscellaneous|
 
In this part, we describe the available classifiers and the format of the configuration file they generate.

\par Configuration file format
The configuration file generated by Classifier Trainer can be an XML or a binary file, depending on the chosen algorithm. The Classifier Trainer box was designed so that you don't have to change this file, however if you need to, we describe the file format used by each classifier.
They all use a specific configuration file format (XML or binary), written by the Classifier Trainer and read by the Classifier Processor. This document describe the file format used by each algorithm.

To read or write XML formats, simply open the file in plain text. To read or write Binary files, you must open the file in binary mode. This depends a lot on the programming language or software you are using to read or write the file. Please refer to the language or software documentation.

\par Support Vector Machine (SVM)
A well-known classifier supporting non-linear classification via kernels. The implementation is based on LIBSVM 2.91, which is included in the BRAND_NAME source tree. The parameters exposed in the GUI correspond to LIBSVM parameters. For more information on LIBSVM, see <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/">here</a>.

The SVM uses a XML file format, with the following content:

\verbatim
<OpenViBE-Classifier>
	<SVM>
		<Param>
			<svm_type>SVM type </svm_type>
			<kernel_type>Kernel type</kernel_type>
		</Param>
		<Model>
			<nr_class>Number of classes</nr_class>
			<total_sv>Number of support vectors</total_sv>
			<rho>Rho value</rho>
			<label>class identifiers</label>
			<probA>pA Value</probA>
			<probB>pB Value </probB>
			<nr_sv>Number of SV for the different classes</nr_sv>
			<SVs>
				<SV>
					<coef>1</coef>
					<value>0:1.51057 1:1.55057</value>
				</SV>
				<SV>
					<coef>1</coef>
					<value>0:1.47314 1:1.54189</value>
				</SV>
				[… other Support Vectors in <SV> … </SV>]
			</SVs>
		</Model>
	</SVM>
</OpenViBE-Classifier>
\endverbatim

For example:
 
\verbatim
<OpenViBE-Classifier>
	<SVM>
		<Param>
			<svm_type>c_svc</svm_type>
			<kernel_type>linear</kernel_type>
		</Param>
		<Model>
			<nr_class>2</nr_class>
			<total_sv>861</total_sv>
			<rho>-8.251732e-001</rho>
			<label>1 2</label>
			<probA>-1.341805e+000</probA>
			<probB>1.481630e-001</probB>
			<nr_sv>431 430</nr_sv>
			<SVs>
				<SV>
					<coef>1</coef>
					<value>0:1.51057 1:1.55057</value>
				</SV>
				<SV>
					<coef>1</coef>
					<value>0:1.47314 1:1.54189</value>
				</SV>
				[… other Support Vectors in <SV> … </SV>]
			</SVs>
		</Model>
	</SVM>
</OpenViBE-Classifier>
\endverbatim

\par Linear Discriminant Analysis (LDA)
 A simple and fast linear classifier. For description, see any major textbook on Machine Learning or Statistics (e.g. Duda, Hart & Stork, or Hastie, Tibshirani & Friedman).
 
 The LDA uses a binary file format, with the following content, in the following order:
 

Size in bits | Type of data   |Description                          
-------------|----------------|-------------------------------------
64           |Double          |Identifier for class 1               
64           |Double          |Identifier for class 2               
32           |Unsigned Integer|Number of coefficients (N)           
N*64         |Double          |The N coefficients, one after another

\par Shrinkage LDA (sLDA)
A variant of Linear Discriminant Analysis (LDA) with regularization. The regularization is performed by shrinking the empiric covariance matrix towards a prior covariance matrix according to a method proposed by Ledoit & Wolf: "A Well-Conditioned Estimator for Large-Dimensional Covariance Matrices", 2004. The code follows the original Matlab implementation of the authors.
\par
The shrinkage LDA classifier has the following options.
\par
\li Shrinkage: A value s between [0,1] sets a linear weight between dataCov and priorCov. I.e. cov=(1-s)*dataCov+s*priorCov. Value <0 is used to auto-estimate the shrinking coefficient (default). If var(x) is a vector of empirical variances of all data dimensions, priorCov is a diagonal matrix with a single value mean(var(x)) pasted on its diagonal.
\li Force diagonal cov: This sets the nondiagonal entries of the covariance matrices to zero. 
\par
Note that setting shrinkage to 0 should get you the regular LDA behavior. If you additionally force the covariance to be diagonal, you should get a model resembling the Naive Bayes classifier.
 
The Shrinkage LDA uses a XML file format, with the following content:

\verbatim
<OpenViBE-Classifier>
	<LDA>
		<Creator>ShrinkageLDA</Creator>
		<Classes>[class 1 identifier] [class 2 identifier]</Classes>
		<Coefficients> [coef 1] [coef 2] …</Coefficients>
	</LDA>
</OpenViBE-Classifier>
\endverbatim

Example:
\verbatim
<OpenViBE-Classifier>
	<LDA>
		<Creator>ShrinkageLDA</Creator>
		<Classes>1 2</Classes>
		<Coefficients>1.196865e+000 4.770741e+000 -5.197334e+000</Coefficients>
	</LDA>
</OpenViBE-Classifier>
\endverbatim

\par Normal Naïves Bayes
The NNB uses a binary file format, with the following content, in the following order:
 
 
Size in bits | Type of data   |Description                          
-------------|----------------|------------------------------------
32           |Unsigned Integer|Number of values N                   
32           |Unsigned Integer|Size of the feature vectors          
64           |Double          |Means                                
N*64         |Double          |The N coefficients, one after another

 
\par K Nearest Neighbors
The KNN uses a binary file format, with the following content, in the following order:
 
Size in bits | Type of data   |Description                          
-------------|----------------|-------------------------------------
64           |Unsigned Integer|Label Count                          
64           |Unsigned Integer|Neighbor count                       
64           |Unsigned Integer|Feature vector count N               
64           |Unsigned Integer|Feature vector size S                
S*N*64       |Double          |The N*S features, vector after vector

 
 
 * |OVP_DocEnd_BoxAlgorithm_ClassifierProcessor_Miscellaneous|
 */
