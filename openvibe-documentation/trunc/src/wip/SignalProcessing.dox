/**

\page Doc_SignalProcessing_All Signal processing

\if FOOBAR
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
\endif

\section Doc_SignalProcessing_GPL GPL-licensed signal processing boxes

Plugins that may be freely distributed are grouped under the 'Signal processing GPL' category. 

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL - BASIC
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	<strong>Basic plugins</strong>

Includes the 'DetectingMinMax Algorithm' and 'Downsampling' boxes.

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL - CLASSIFICATION
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

 	<strong>Classification plugins</strong>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL - FILTERS
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Filtering plugins</strong>

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL - ICA
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Independent Component Analysis plugins</strong>
	
	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING GPL - SPECTRAL ANALYSIS
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif
	
	<strong>Spectral Analysis plugins</strong>
	
	The Spectral Analysis box performs spectrum computations on incoming signals and possible outputs include the spectrum
	amplitude (the power of the signal in a number of frequency bands), as well as its phase, real part and imaginary part. 
	Output computations may be enabled/disabled from the settings dialog box.
	
	Example : Visualising the power spectrum of a signal.
	
	Let's use a Signal Oscillator box to generator sinusoidal signals on one channel. Next we add a Spectral Analysis
	box and connect boxes together. We make sure the 'Amplitude' of the signal is computed by checking the appropriate
	setting in the settings dialog box (see image below). Finally, we connect the 'Amplitude' output connector of the 
	Spectral Analysis box to the input connector of a Power Spectrum Display box. The player may now be launched to visualize
	the power spectrum of the signal.
	
	<img src="signal_processing_spectral_analysis.png"></img>
	<center><strong>Visualising the power spectrum of sinusoidal signals</strong></center>
	
	<strong>Windowing plugins</strong>
	

\if FOOBAR
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING (NON GPL)
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
\endif

\section Doc_SignalProcessing Signal processing boxes (Non-GPL)

Signal processing for non GPL plugins (e.g. plugins based on the [INSERT NON FREE LIBRARY NAMES HERE] libraries)

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING - AVERAGING
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Averaging plugins</strong>
	
	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING - BASIC
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Basic signal processing plugins</strong>
	
		
	
	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING - DETRENDING
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Detrending plugins</strong>
	
	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING - EPOCHING
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Epoching plugins</strong>
	
	The time based epoching box generates 'epochs', i.e. signal 'slices' which length is configurable, as is the time offset between two consecutive
	epochs. This box has one input and one output connectors, both of which are of 'signal' type. This box is essential to other signal processing boxes
	when the size of data blocks being forwarded to them is not significant enough.
	
	Example : Apply time based epoching to compute the power spectrum of a signal
	
	For the spectral analysis to work properly, signal data must come in chunks big enough for the analysis to be meaningful. Let's see how the time-based 
	epoching box can help to improve the power spectrum computation of a signal. 
	
	First, we add a Signal Oscillator box to a scenario, connect it to a Spectral Analysis box, and connect the Amplitude output connector to the 
	input of a Power Spectrum Display box. Let's use default Sinus Oscillator settings (512Hz sampling frequency, data blocks size of 32 samples) and 
	make sure the Amplitude setting is enabled in the Spectral Analysis box. Now we can launch the player : the power spectrum is very coarse. 
	This is because the Sinus Oscillator generates small data blocks (32/512 = 1/16th of a second per block) compared to the periods of sinusoids making up the signal. 
	The spectral analysis yields very coarse results when working on such blocks (see image below).
	
	<img src="signal_processing_time_based_epoching_1.png"></img>
	<center><strong>Coarse power spectrum computation due to small data blocks</strong></center>
	
	One way to correct this problem is to increase the data blocks size. Let's send bigger blocks by setting their size to 512 samples. When launching the
	player again, the power spectrum should be much finer than before, since the spectral analysis works on blocks representing 1 second of signal. However,
	notice how the spectrum is only refreshed at 1Hz now. This solution is not satisfactory.
	
	<img src="signal_processing_time_based_epoching_2.png"></img>
	<center><strong>Finer power spectrum computation by sending bigger chunks</strong></center>
	
	Now we insert a Time based epoching box before the Spectral Analysis. We reset the Sinus Oscillator settings to 512 samples a second and blocks of 32 samples.
	Let's now setup the epoching box : we are going to generate epochs of 1 second every 1/16th of a second. Now let's launch the player again : the power
	spectrum is refined and updated regularly.
	
	<img src="signal_processing_time_based_epoching_3.png"></img>
	<center><strong>Epoching 1-second chunks to refine spectrum computations</strong></center>
	
	The stimulation based epoching box is similar to time based epoching, only it generates epochs when a given stimulation is received. Thus, the box has
	two input connectors : one for signals and another for stimulations. Settings include epoch size, epoch offset (delay when epoching should start
	after the target stimulation is received), and stimulation identifier.
		
	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING - SPATIAL FILTERING
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Spatial filtering plugins</strong>


\if FOOBAR
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING (OTHERS)
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
\endif

\section Doc_SignalProcessing_OtherBoxes Other signal processing boxes

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING (OTHERS) - FEATURE EXTRACTION
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Feature extraction</strong>

Includes a feature aggregator to store several features in a single vector.

	\if FOOBAR
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
				SIGNAL PROCESSING (OTHERS) - CLASSIFICATION
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	\endif

	<strong>Classification</strong>

Includes a linear discriminant analysis classifier.

...	

*/