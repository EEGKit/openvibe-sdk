
/************************************************************************/
/* This file is part of openMask(c) INRIA, CNRS, Universite de Rennes 1 */
/* 1993-2002, thereinafter the Software                                 */
/*                                                                      */
/* The Software has been developped within the Siames Project.          */
/* INRIA, the University of Rennes 1 and CNRS jointly hold intellectual */
/* property rights                                                      */
/*                                                                      */
/* The Software has been registered with the Agence pour la Protection  */
/* des Programmes (APP) under registration number                       */
/* IDDN.FR.001.510008.00.S.P.2001.000.41200                             */
/*                                                                      */
/* This file may be distributed under the terms of the Q Public License */
/* version 1.0 as defined by Trolltech AS of Norway and appearing in    */
/* the file LICENSE.QPL included in the packaging of this file.         */
/*                                                                      */
/* Licensees holding valid specific licenses issued by INRIA, CNRS or   */
/* Universite Rennes 1 for the software may use this file in            */
/* acordance with that specific license                                 */
/************************************************************************/
/************************************************************************/
/* WARNING : GENERATED FILE. DO NOT MODIFY IT.                          */
/* Generated the 2006-09-21 at 15:37:25                                 */
/* Generated by omk version 1.2.0                                       */
/* Use just as it is or derive this class to add the  necessary         */
/* functions.                                                           */
/************************************************************************/
/************************************************************************/
		

#include "ovkPsDuplicatedContextBase.h"
#include <PsParametersAccessor.h>
#include <vector>
#include <string>
#include <iostream>

//========================================================================
// Default constructor
PsDuplicatedContextBase::PsDuplicatedContextBase( PsController& ctrl, const PsObjectDescriptor& objectDescriptor )
: PsDuplicatedObject( ctrl, objectDescriptor )
{
  _exitOnInitError = false ;
 }

//========================================================================
// Destructor
PsDuplicatedContextBase::~PsDuplicatedContextBase()
{
}
//========================================================================
// Default values for parameters
void PsDuplicatedContextBase::resetDefaultValues()
{
  //=== Reset default parameters
  // No parameters to reset => Nothing to do
}
		//========================================================================
// Configuration parameters loader
bool PsDuplicatedContextBase::loadAttributsParameters( const PsConfigurationParameterDescriptor * node )
{
  // Tests the configuration parameter node
  if( !node )
  { // No valid node => display error message and return false
    std::cerr << ":-( Error in PsDuplicatedContextBase::loadAttributsParameters for object \"" << getName().getPsString() << "\""
              << "\" (class " << getObjectDescriptor().getClass().getPsString() << ")"
              << std::endl << ">>> Invalid node" << std::endl ; 
    return false ;
  }

  // No validation requiered, always true if valid node was given
  return true ;
}
		//========================================================================
// Initialisation
void PsDuplicatedContextBase::init()
{
  const PsConfigurationParameterDescriptor* node = getConfigurationParameters();
  // Test the configuration parameter node
  if( !node )
  {
    std::cerr << ":-( Error in PsDuplicatedContextBase::init for object \"" << getName().getPsString() << "\" (class "
              << getObjectDescriptor().getClass().getPsString() << ")" << std::endl
              << ">>> Invalid node => Unable to initialize" << std::endl ;
    // Must exit or return
    if( _exitOnInitError ) exit( -1 ) ; else return ;
  }
  bool ok = true ;
  // Reset default parameters
  resetDefaultValues() ;
  // Load attributs
  ok = loadAttributsParameters  ( node ) && ok ;
  // Load connections
  ok = loadInputsConnectionsParameters( node ) && ok ;
  // Load connections
  ok = loadEventsConnectionsParameters( node ) && ok ;
  if( !ok && _exitOnInitError )
  { // Not ok, display the following message and exit
    std::cerr << ":-( Error in PsDuplicatedContextBase::init for object \"" << getName().getPsString() << "\" (class "
              << getObjectDescriptor().getClass().getPsString() << ")" << std::endl
              << ">>> Unable to initialize the object" << std::endl ; 
    exit( -1 ) ;
  }
}
//========================================================================
void PsDuplicatedContextBase::compute()
{
  computeInputs    ();
  computeParameters();
  computeOutputs   ();
}

//========================================================================
