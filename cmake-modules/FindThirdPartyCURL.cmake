# ---------------------------------
# Adds Curl library to the target project
# Adds include path
# Requires FindThirdPartyCurl.cmake to have been run successfully before
# ---------------------------------

FIND_PATH(PATH_CURL include/curl.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/curl ${OV_CUSTOM_DEPENDENCIES_PATH})
IF(PATH_CURL)
	MESSAGE(STATUS "  Found CURL...")
ELSE()
	MESSAGE(STATUS "  FAILED to find CURL in ${OV_CUSTOM_DEPENDENCIES_PATH}")
ENDIF()

SET(CURL_STATICLIB ON)
ADD_DEFINITIONS(-DCURL_STATICLIB)

IF(PATH_CURL)
	
	# Find all library paths
	IF(WIN32)
		FIND_LIBRARY(CURLLIB curllib PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(CURLLIB curllib PATHS ${PATH_CURL}/lib)
		IF(CURLLIB)
			MESSAGE(STATUS "    [  OK  ] lib ${CURLLIB}")		
		ELSE(CURLLIB)
			MESSAGE(STATUS "    [FAILED] lib curllib ${PATH_CURL}")
			RETURN()
		ENDIF(CURLLIB)
		
		FIND_LIBRARY(LIBCURL_IMP libcurl_imp PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(LIBCURL_IMP libcurl_imp PATHS ${PATH_CURL}/lib)
		IF(LIBCURL_IMP)
			MESSAGE(STATUS "    [  OK  ] lib ${LIBCURL_IMP}")		
		ELSE(LIBCURL_IMP)
			MESSAGE(STATUS "    [FAILED] lib libcurl_imp ${PATH_CURL}")
			RETURN()
		ENDIF(LIBCURL_IMP)
		
		FIND_LIBRARY(LIBEAY32 libeay32 PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(LIBEAY32 libeay32 PATHS ${PATH_CURL}/lib)
		IF(LIBEAY32)
			MESSAGE(STATUS "    [  OK  ] lib ${LIBEAY32}")		
		ELSE(LIBEAY32)
			MESSAGE(STATUS "    [FAILED] lib libeay32 ${PATH_CURL}")
			RETURN()
		ENDIF(LIBEAY32)
		
		FIND_LIBRARY(LIB_OPENLDAP openldap PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(LIB_OPENLDAP openldap PATHS ${PATH_CURL}/lib)
		IF(LIB_OPENLDAP)
			MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENLDAP}")		
		ELSE(LIB_OPENLDAP)
			MESSAGE(STATUS "    [FAILED] lib openldap ${PATH_CURL}")
			RETURN()
		ENDIF(LIB_OPENLDAP)
		
		FIND_LIBRARY(LIB_SSLEAY32 ssleay32 PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(LIB_SSLEAY32 ssleay32 PATHS ${PATH_CURL}/lib)
		IF(LIB_SSLEAY32)
			MESSAGE(STATUS "    [  OK  ] lib ${LIB_SSLEAY32}")		
		ELSE(LIB_SSLEAY32)
			MESSAGE(STATUS "    [FAILED] lib ssleay32 ${PATH_CURL}")
			RETURN()
		ENDIF(LIB_SSLEAY32)
		
	ENDIF(WIN32)

	IF(UNIX)
		FIND_LIBRARY(CURLLIB_STATIC curl PATHS ${PATH_CURL}/lib NO_DEFAULT_PATH)
		FIND_LIBRARY(CURLLIB_STATIC curl PATHS ${PATH_CURL}/lib)
		IF(CURLLIB_STATIC)
			MESSAGE(STATUS "    [  OK  ] lib ${CURLLIB_STATIC}")
		ELSE(CURLLIB_STATIC)
			MESSAGE(STATUS "    [FAILED] lib curllib_static")
			RETURN()
		ENDIF(CURLLIB_STATIC)
	ENDIF(UNIX)
		
	# If we reach here, everything has been found, add
	INCLUDE_DIRECTORIES(${PATH_CURL}/include)
	
	IF(WIN32)
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CURLLIB})
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBCURL_IMP})
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBEAY32})
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_OPENLDAP})
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_SSLEAY32})
	ENDIF(WIN32)
	IF(UNIX)
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CURLLIB})
	ENDIF(UNIX)
	
	ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyCURL)
ELSE(PATH_CURL)
	MESSAGE(AUTHOR_WARNING "LIBCURL not found")
ENDIF(PATH_CURL)

