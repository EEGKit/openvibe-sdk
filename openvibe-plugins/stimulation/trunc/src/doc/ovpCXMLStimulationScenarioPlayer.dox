/**
 \page Doc_ovpCXMLStimulationScenarioPlayer XML stimulation scenario player documentation

- Plugin name : XML stimulation scenario player
- Version :	0.1
- Author : 	Bruno Renier
- Date :	06-07-2007

<br>
Summary :

\ref Doc_ovpCXMLStimulationScenarioPlayer_description

\ref Doc_ovpCXMLStimulationScenarioPlayer_inputs

\ref Doc_ovpCXMLStimulationScenarioPlayer_outputs

\ref Doc_ovpCXMLStimulationScenarioPlayer_settings

\ref Doc_ovpCXMLStimulationScenarioPlayer_examples

\ref Doc_ovpCXMLStimulationScenarioPlayer_misc

<hr>
<br>
<br>
 \section Doc_ovpCXMLStimulationScenarioPlayer_description Description
This plugin generates stimulations according to a scenario written in an XML file.
This scenario's state can be perturbed by incoming stimulations.

\image html XMLStimulationScenarioPlayerBox.png


 \section Doc_ovpCXMLStimulationScenarioPlayer_inputs Inputs
 Number of inputs : 1 

-# Incoming stimulations
 - OV_TypeId_Stimulations
 - A stream of incoming stimulations.

 \section Doc_ovpCXMLStimulationScenarioPlayer_outputs Outputs
Number of outputs : 1

-# Generated stimulations 
 - OV_TypeId_Stimulations
 - A stream of stimulations generated according to a pre-established scenario.

 \section Doc_ovpCXMLStimulationScenarioPlayer_settings Settings
Number of settings : 1

-# Scenario description file
 - OV_TypeId_String
 - The XML file containing the scenario description.

\section Doc_ovpCXMLStimulationScenarioPlayer_examples Examples
Here is an example of scenario file :

\code
<Automaton>
	<Variable name="StartExperimentWait" value="500"></Variable>
	<Variable name="CrossOnScreen" value="786"></Variable>
	<Variable name="BeepWait" value="2000"></Variable>
	<Variable name="Beep" value="785"></Variable>
	<Variable name="WaitForCue" value="1000"></Variable>
	<Variable name="LeftCue" value="769"></Variable>
	<Variable name="RightCue" value="770"></Variable>
	<Variable name="DisplayCueWait" value="1250"></Variable>
	<Variable name="Idle" value="800"></Variable>
	<Variable name="ContinuousFeedback" value="781"></Variable>
	<Variable name="ContinuousFeedbackDuration" value="3000"></Variable>
	<Node class="LoopFinite">
		<Property class="Iteration">
			<Parameter class="IValue">40</Parameter>
		</Property>
		<Child>
			<Node class="ActionWaitTime">
				<Property class="Duration">
					<Parameter class="IVariable">StartExperimentWait</Parameter>
				</Property>
			</Node>
			<Node class="ActionSendEvent">
				<Property class="Event">
					<Parameter class="IVariable">CrossOnScreen</Parameter>
				</Property>
			</Node>
			<Node class="ActionWaitTime">
				<Property class="Duration">
					<Parameter class="IVariable">BeepWait</Parameter>
				</Property>
			</Node>
			<Node class="ActionSendEvent">
				<Property class="Event">
					<Parameter class="IVariable">Beep</Parameter>
				</Property>
			</Node>
			<Node class="ActionWaitTime">
				<Property class="Duration">
					<Parameter class="IVariable">WaitForCue</Parameter>
				</Property>
			</Node>
			<Node class="SwitchProbabilist">
				<Child>	
					<Property class="Probability">
						<Parameter class="IValue">5</Parameter>
					</Property>
					<Node class="ActionSendEvent">
						<Property class="Event">
							<Parameter class="IVariable">LeftCue</Parameter>
						</Property>
					</Node>
				</Child>
				<Child>	
					<Property class="Probability">
						<Parameter class="IValue">5</Parameter>
					</Property>
					<Node class="ActionSendEvent">
						<Property class="Event">
							<Parameter class="IVariable">RightCue</Parameter>
						</Property>
					</Node>
				</Child>
			</Node>
			<Node class="ActionWaitTime">
				<Property class="Duration">
					<Parameter class="IVariable">DisplayCueWait</Parameter>
				</Property>
			</Node>
			<Node class="ActionSendEvent">
				<Property class="Event">
					<Parameter class="IVariable">ContinuousFeedback</Parameter>
				</Property>
			</Node>
			<Node class="ActionWaitTime">
				<Property class="Duration">
					<Parameter class="IVariable">ContinuousFeedbackDuration</Parameter>
				</Property>
			</Node>
			<Node class="ActionSendEvent">
				<Property class="Event">
					<Parameter class="IVariable">Idle</Parameter>
				</Property>
			</Node>
		</Child>
	</Node>
</Automaton>
\endcode

\section Doc_ovpCXMLStimulationScenarioPlayer_misc Miscellaneous
First of all, a scenario is enclosed between an <Automaton> and </Automaton> tags.
A scenario is made of different nodes. Each node can have properties, and properties can have parameters.
When several nodes are on the same hierarchical level, they execute one after the other.
The general structure of a node is has follow :

\code
<Node class="Class_of_the_node">
	<Property class="Name_of_the_property">
		<Parameter class="Type_of_the_parameter">Parameter_value</Parameter>
	</Property>
</Node>
\endcode

For now, the there are only two parameter types : integers and variables.
We will describe the later in the next part. For integers, the type is IValue.

\code
	<Parameter class="IValue">123</Parameter>
\endcode


\subsection Doc_ovpCXMLStimulationScenarioPlayer_misc_vars Variables

At the beginning of the description, just after the <Automaton> tag, it is possible to define variables (those are more constants than variables), that you will be able to use by their names later.
A variable declaration looks like that :

\code
<Variable name="Variable_name" value="Variable_value"></Variable>
\endcode

As of now, all values are integers (that may change in the future).
To use a variable in a parameter node, you just have to do like this :

\code
	<Parameter class="IVariable">Name_of_the_variable</Parameter>
\endcode

\subsection Doc_ovpCXMLStimulationScenarioPlayer_misc_nodes Nodes description

There a two main categories of nodes : "Action nodes and "Control nodes".


\subsubsection Doc_ovpCXMLStimulationScenarioPlayer_misc_nodes_action Action nodes

Existing action nodes are :
 - SendEvent nodes : outputs the associated stimulation ;
 - WaitEvent nodes : waits for the associated stimulation (from the input) before proceeding to the next node ;
 - WaitTime nodes : waits for a certain duration before proceeding.

SendEvent and WaitEvent nodes must have an "event" property, with one value (parameter).
This value is the stimulation identifier.

WaitTime must have a "Duration" property set with one value. This value is the duration (in ms) the scenario must wait in this state.

\subsubsection Doc_ovpCXMLStimulationScenarioPlayer_misc_nodes_action Control nodes

Nodes between <Child> and </Child> tags are child nodes of the control node.

Existing control nodes are :
 - LoopInfinite nodes : executes infinitely its child nodes ;
 - LoopFinite nodes : executes a finite number of times its child nodes ;
 - SwitchProbabilist nodes : executes one of its child branch depending on their probability to be executed ;
 - RandomOrder nodes : executes a finite number of time each child branch, in a random order.

LoopInfinite has property and must have one child.

Loopfinite must have the "Iteration" property configured with one parameter, and have one child.

SwitchProbabilist can have one or more <Child>...</Child> branches.
Each branch must have a "probability" property configured with one parameter.
This parameter is the probability that this branch will be executed by the switch (the real probability depends on the sum on the probabilities of all the switch children).

In the example below, each branch has the same probability.
\code
<Node class="SwitchProbabilist">
	<Child>	
		<Property class="Probability">
			<Parameter class="IValue">5</Parameter>
		</Property>
		Node1 ...
		Node2 ...
		Node3 ...
	</Child>
	<Child>	
		<Property class="Probability">
			<Parameter class="IValue">5</Parameter>
		</Property>
		Node1'...
		Node2'...
	</Child>
</Node>
\endcode

The RandomOrder looks like the SwitchProbabilist node, except that the child branches don't need to have a probability (since we go through each branch the same number of time).
The RandomOrder node just needs an "Iteration" property (with one parameter) indicating how many times it must go trough each branch.

*/
