FILE(GLOB_RECURSE source_files *.cpp)

ADD_LIBRARY(${PROJECT_NAME}-static ${source_files})

ADD_DEFINITIONS(-DOVP_Exports)
ADD_DEFINITIONS(-DOVP_Shared)
ADD_LIBRARY(${PROJECT_NAME}-dynamic SHARED ${source_files})

SET_TARGET_PROPERTIES(${PROJECT_NAME}-dynamic PROPERTIES
	VERSION ${PROJECT_VERSION}
	SOVERSION ${PROJECT_VERSION_MAJOR})

ADD_DEPENDENCIES(${PROJECT_NAME}-dynamic OpenViBE-toolkit-dynamic)
ADD_DEPENDENCIES(${PROJECT_NAME}-dynamic OpenViBE-toolkit-static)

ADD_DEPENDENCIES(${PROJECT_NAME}-static OpenViBE-toolkit-dynamic)
ADD_DEPENDENCIES(${PROJECT_NAME}-static OpenViBE-toolkit-static)

# ---------------------------------
# Finds module EBML
# Adds library to target
# Adds include path
# ---------------------------------
FIND_PATH(PATH_OPENVIBE_MODULES_EBML include/ebml/defines.h PATHS $ENV{OpenViBE_modules}/ebml $ENV{OpenViBE_module_ebml})
IF(PATH_OPENVIBE_MODULES_EBML)
	MESSAGE(STATUS "  Found OpenViBE module ebml...")
	INCLUDE_DIRECTORIES(${PATH_OPENVIBE_MODULES_EBML}/include)
	FIND_LIBRARY(LIB_OPENVIBE_MODULE_EBML OpenViBE-module-EBML-${MODULE_LINKING} PATHS ${PATH_OPENVIBE_MODULES_EBML}/lib)
	IF(LIB_OPENVIBE_MODULE_EBML)
		MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENVIBE_MODULE_EBML}")
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${LIB_OPENVIBE_MODULE_EBML})
	ELSE(LIB_OPENVIBE_MODULE_EBML)
		MESSAGE(STATUS "    [FAILED] lib OpenViBE-module-EBML-${MODULE_LINKING}")
	ENDIF(LIB_OPENVIBE_MODULE_EBML)
ELSE(PATH_OPENVIBE_MODULES_EBML)
	MESSAGE(STATUS "  FAILED to find OpenViBE module ebml...")
ENDIF(PATH_OPENVIBE_MODULES_EBML)

# ---------------------------------
# Finds module System
# Adds library to target
# Adds include path
# ---------------------------------
FIND_PATH(PATH_OPENVIBE_MODULES_SYSTEM include/system/defines.h PATHS $ENV{OpenViBE_modules}/system $ENV{OpenViBE_module_system})
IF(PATH_OPENVIBE_MODULES_SYSTEM)
	MESSAGE(STATUS "  Found OpenViBE module system...")
	INCLUDE_DIRECTORIES(${PATH_OPENVIBE_MODULES_SYSTEM}/include)
	FIND_LIBRARY(LIB_OPENVIBE_MODULE_SYSTEM OpenViBE-module-System-${MODULE_LINKING} PATHS ${PATH_OPENVIBE_MODULES_SYSTEM}/lib)
	IF(LIB_OPENVIBE_MODULE_SYSTEM)
		MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENVIBE_MODULE_SYSTEM}")
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${LIB_OPENVIBE_MODULE_SYSTEM})
	ELSE(LIB_OPENVIBE_MODULE_SYSTEM)
		MESSAGE(STATUS "    [FAILED] lib OpenViBE-module-System-${MODULE_LINKING}")
	ENDIF(LIB_OPENVIBE_MODULE_SYSTEM)
ELSE(PATH_OPENVIBE_MODULES_SYSTEM)
	MESSAGE(STATUS "  FAILED to find OpenViBE module system...")
ENDIF(PATH_OPENVIBE_MODULES_SYSTEM)

# ---------------------------------
# Finds module XML
# Adds library to target
# Adds include path
# ---------------------------------
FIND_PATH(PATH_OPENVIBE_MODULES_XML include/xml/defines.h PATHS $ENV{OpenViBE_modules}/xml $ENV{OpenViBE_module_xml})
IF(PATH_OPENVIBE_MODULES_XML)
	MESSAGE(STATUS "  Found OpenViBE module xml...")
	INCLUDE_DIRECTORIES(${PATH_OPENVIBE_MODULES_XML}/include)
	FIND_LIBRARY(LIB_OPENVIBE_MODULE_XML OpenViBE-module-XML-${MODULE_LINKING} PATHS ${PATH_OPENVIBE_MODULES_XML}/lib)
	IF(LIB_OPENVIBE_MODULE_XML)
		MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENVIBE_MODULE_XML}")
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${LIB_OPENVIBE_MODULE_XML})
	ELSE(LIB_OPENVIBE_MODULE_XML)
		MESSAGE(STATUS "    [FAILED] lib OpenViBE-module-XML-${MODULE_LINKING}")
	ENDIF(LIB_OPENVIBE_MODULE_XML)
ELSE(PATH_OPENVIBE_MODULES_XML)
	MESSAGE(STATUS "  FAILED to find OpenViBE module xml...")
ENDIF(PATH_OPENVIBE_MODULES_XML)

# ---------------------------------
# Finds OpenViBE
# Adds library to target
# Adds include path
# ---------------------------------
FIND_PATH(PATH_OPENVIBE include/openvibe/ov_all.h PATHS $ENV{OpenViBE})
IF(PATH_OPENVIBE)
	MESSAGE(STATUS "  Found OpenViBE...")
	INCLUDE_DIRECTORIES(${PATH_OPENVIBE}/include)
	FIND_LIBRARY(LIB_OPENVIBE OpenViBE-${OPENVIBE_LINKING} PATH ${PATH_OPENVIBE}/lib)
	IF(LIB_OPENVIBE)
		MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENVIBE}")
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${LIB_OPENVIBE})
	ELSE(LIB_OPENVIBE)
		MESSAGE(STATUS "    [FAILED] lib OpenViBE-${OPENVIBE_LINKING}")
	ENDIF(LIB_OPENVIBE)
ELSE(PATH_OPENVIBE)
	MESSAGE(STATUS "  FAILED to find OpenViBE...")
ENDIF(PATH_OPENVIBE)

# ---------------------------------
# Finds OpenViBE-toolkit
# Adds library to target
# Adds include path
# ---------------------------------
FIND_PATH(PATH_OPENVIBE_TOOLKIT include/openvibe-toolkit/ovtk_all.h PATHS $ENV{OpenViBE_toolkit})
IF(PATH_OPENVIBE_TOOLKIT)
	MESSAGE(STATUS "  Found OpenViBE-toolkit...")
	INCLUDE_DIRECTORIES(${PATH_OPENVIBE_TOOLKIT}/include)
	FIND_LIBRARY(LIB_OPENVIBE_TOOLKIT OpenViBE-toolkit-${OPENVIBE_LINKING} PATH ${PATH_OPENVIBE_TOOLKIT}/lib)
	IF(LIB_OPENVIBE_TOOLKIT)
		MESSAGE(STATUS "    [  OK  ] lib ${LIB_OPENVIBE_TOOLKIT}")
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${LIB_OPENVIBE_TOOLKIT})
	ELSE(LIB_OPENVIBE_TOOLKIT)
		MESSAGE(STATUS "    [FAILED] lib OpenViBE-toolkit-${OPENVIBE_LINKING}")
	ENDIF(LIB_OPENVIBE_TOOLKIT)
ELSE(PATH_OPENVIBE_TOOLKIT)
	MESSAGE(STATUS "  FAILED to find OpenViBE-toolkit...")
ENDIF(PATH_OPENVIBE_TOOLKIT)

# ---------------------------------
# Finds Glade
# Adds library to target
# Adds include path
# ---------------------------------
INCLUDE("FindGlade.cmake")
IF(GLADE_FOUND)
	MESSAGE(STATUS "  Found glade...")
	INCLUDE_DIRECTORIES(${GLADE_INCLUDE_DIRS})
	ADD_DEFINITIONS(${GLADE_CFLAGS})
	ADD_DEFINITIONS(${GLADE_CFLAGS_OTHERS})
	LINK_DIRECTORIES(${GLADE_LIBRARY_DIRS})
	FOREACH(GLADE_LIB ${GLADE_LIBRARIES})
		SET(GLADE_LIB1 "GLADE_LIB1-NOTFOUND")
		FIND_LIBRARY(GLADE_LIB1 NAMES ${GLADE_LIB} PATHS ${GLADE_LIBRARY_DIRS} ${GLADE_LIBDIR})
		IF(GLADE_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${GLADE_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${GLADE_LIB1})
		ELSE(GLADE_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${GLADE_LIB}")
		ENDIF(GLADE_LIB1)
	ENDFOREACH(GLADE_LIB)
ELSE(GLADE_FOUND)
	MESSAGE(STATUS "  FAILED to find glade...")
ENDIF(GLADE_FOUND)
