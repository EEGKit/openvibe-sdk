FILE(GLOB_RECURSE source_files *.cpp)

ADD_LIBRARY(${PROJECT_NAME}-static ${source_files})
ADD_LIBRARY(${PROJECT_NAME}-dynamic SHARED ${source_files})

SET_TARGET_PROPERTIES(${PROJECT_NAME}-dynamic PROPERTIES
	VERSION ${PROJECT_VERSION}
	SOVERSION ${PROJECT_VERSION_MAJOR}
	COMPILE_FLAGS "-DOVP_Exports -DOVP_Shared")

ADD_DEPENDENCIES(${PROJECT_NAME}-dynamic OpenViBE-toolkit-dynamic)
ADD_DEPENDENCIES(${PROJECT_NAME}-dynamic OpenViBE-toolkit-static)

ADD_DEPENDENCIES(${PROJECT_NAME}-static OpenViBE-toolkit-dynamic)
ADD_DEPENDENCIES(${PROJECT_NAME}-static OpenViBE-toolkit-static)

INCLUDE("FindOpenViBE.cmake")
INCLUDE("FindOpenViBEModuleEBML.cmake")
INCLUDE("FindOpenViBEToolkit.cmake")

# ---------------------------------
# Finds Glade
# Adds library to target
# Adds include path
# ---------------------------------
INCLUDE("FindGlade.cmake")
IF(GLADE_FOUND)
	MESSAGE(STATUS "  Found glade...")
	INCLUDE_DIRECTORIES(${GLADE_INCLUDE_DIRS})
	ADD_DEFINITIONS(${GLADE_CFLAGS})
	ADD_DEFINITIONS(${GLADE_CFLAGS_OTHERS})
	LINK_DIRECTORIES(${GLADE_LIBRARY_DIRS})
	FOREACH(GLADE_LIB ${GLADE_LIBRARIES})
		SET(GLADE_LIB1 "GLADE_LIB1-NOTFOUND")
		FIND_LIBRARY(GLADE_LIB1 NAMES ${GLADE_LIB} PATHS ${GLADE_LIBRARY_DIRS} ${GLADE_LIBDIR})
		IF(GLADE_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${GLADE_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${GLADE_LIB1})
		ELSE(GLADE_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${GLADE_LIB}")
		ENDIF(GLADE_LIB1)
	ENDFOREACH(GLADE_LIB)
ELSE(GLADE_FOUND)
	MESSAGE(STATUS "  FAILED to find glade...")
ENDIF(GLADE_FOUND)
