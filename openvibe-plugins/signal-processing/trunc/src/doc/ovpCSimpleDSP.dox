/**
 \page Doc_ovpCSimpleDSP Simple DSP plugin

- Plugin name : SimpleDSP
- Version :	0.5
- Author : 	Bruno Renier
- Date :	04-12-2007

<br>
Summary :

\ref Doc_ovpCSimpleDSP_description

\ref Doc_ovpCSimpleDSP_inputs

\ref Doc_ovpCSimpleDSP_outputs

\ref Doc_ovpCSimpleDSP_settings

\ref Doc_ovpCSimpleDSP_examples

\ref Doc_ovpCSimpleDSP_misc

<hr>
<br>
<br>
 \section Doc_ovpCSimpleDSP_description Description
 This plugin is used to apply a mathematical formulae to each sample of an incoming signal and output
the resulting signal. It thus acts as a simple DSP.

\image html BoxAlgorithm_SimpleDSP.png

 \section Doc_ovpCSimpleDSP_inputs Inputs
 Number of inputs : 1

-# Signal input
 - OV_TypeId_Signal
 - The input signal.


 \section Doc_ovpCSimpleDSP_outputs Outputs
Number of outputs : 1

-# Filtered signal
 - OV_TypeId_Signal
 - The filtered signal.

 \section Doc_ovpCSimpleDSP_settings Settings
Number of settings : 1

-# Equation
 - CString
 - The formulae to apply to each sample. See \ref Doc_ovpCSimpleDSP_misc for more details.

\section Doc_ovpCSimpleDSP_examples Examples

Let's consider that we want to compute the natural logarithm of the absolute value of the input signal plus one. We just have to type the equation like that :
\code
log(abs(X) + 1)
\endcode

Another example : if you want to sum the cosinus of X minus Pi with its sinus plus Pi, you can enter this equation :
\code
cos(X - M_PI) + sin(X + M_PI)
\endcode

 \section Doc_ovpCSimpleDSP_misc Miscellaneous

The sample's variable in the equation is named 'X'.

Here is a list of supported functions/operators :

- Operators
 - +
 - -
 - *
 - /

- Unary functions
 - abs
 - acos
 - asin
 - atan
 - ceil
 - cos
 - exp
 - floor
 - log
 - log10
 - sin
 - sqrt
 - tan

- Binary function
 - pow

Since the equation is translated into a set of function calls, it is quite slower than it would be if the equation was directly compiled into machine code. That's why some simple equations are "built-in" the plugin and will achieve significantly faster execution times.

Those are :
- X (identity)
- X*X or pow(X,2)
- X + Constant
- X - Constant
- X * Constant
- X / Constant
- Unaryfunction(X), where Unaryfunction is any of the previously introduced unary functions.

There are also a few defined constants :

- M_PI
- M_PI_2
- M_PI_4 
- M_1_PI
- M_2_PI
- M_2_SQRTPI
- M_SQRT2
- M_SQRT1_2
- M_E
- M_LOG2E
- M_LOG10E
- M_LN2
- M_LN10

(note : their meaning is the same as the constants of the same name in math.c)

Furthermore, the equation parser is totally case-insensitive. So you can write "COS(m_pi+x)" or "cos(M_PI+X)", it doesn't matter.

Don't worry about the whitespaces and blank characters, they are automatically skipped by the equation parser.
That means, for instance, that both "X+1" and "X      + 1" work.

This plugin implements basic constant folding. That means that when the plugin analyses the equation, if it can compute some parts of it before compilation, it will. For now, it does not support rational equations simplification.

*/
